{"assets": {"openEO_Level1_class-0_129predictors_v1_100000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_100000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/5963eff4170d26958eeda4050480582c/openEO_Level1_class-0_129predictors_v1_100000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_100000", "statistics": {"maximum": 93.0, "mean": 10.639752854538, "minimum": 0.0, "stddev": 15.03855398429, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_100000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_110000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_110000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/52b2967eafc269de9a2e8af9c0079452/openEO_Level1_class-0_129predictors_v1_110000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_110000", "statistics": {"maximum": 96.0, "mean": 10.75617589204, "minimum": 0.0, "stddev": 15.238629956227, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_110000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_30000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_30000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/148c7e20520a42dfe61102743bbc1caa/openEO_Level1_class-0_129predictors_v1_30000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_30000", "statistics": {"maximum": 95.0, "mean": 10.710201886026, "minimum": 0.0, "stddev": 15.226104513358, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_30000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_40000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_40000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/3ef81ff69e45aa7f2fb45741966ad887/openEO_Level1_class-0_129predictors_v1_40000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_40000", "statistics": {"maximum": 97.0, "mean": 10.677237847068, "minimum": 0.0, "stddev": 15.481954096349, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_40000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_50000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_50000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/d9edf27cb8a864a0d9ace7b3bd7cd2c6/openEO_Level1_class-0_129predictors_v1_50000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_50000", "statistics": {"maximum": 95.0, "mean": 10.637044274407, "minimum": 0.0, "stddev": 15.769423370378, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_50000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_60000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_60000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4113e3bef41bd731d34e041db57ad79d/openEO_Level1_class-0_129predictors_v1_60000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_60000", "statistics": {"maximum": 96.0, "mean": 10.500976545932, "minimum": 0.0, "stddev": 15.674456177264, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_60000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_70000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_70000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/ac7f28421543edf92d1eeb89c5981aa8/openEO_Level1_class-0_129predictors_v1_70000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_70000", "statistics": {"maximum": 96.0, "mean": 10.51165218398, "minimum": 0.0, "stddev": 15.550643888011, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_70000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_80000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_80000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2294b7f44364a5289e97cb58ee017138/openEO_Level1_class-0_129predictors_v1_80000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_80000", "statistics": {"maximum": 95.0, "mean": 10.591086236441, "minimum": 0.0, "stddev": 15.15913238142, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_80000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level1_class-0_129predictors_v1_90000.tif": {"eo:bands": [{"name": "Level1_class-0_129predictors_v1_90000"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/0b8af17b07b4bfdab5612bc4c3b46e16/openEO_Level1_class-0_129predictors_v1_90000.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level1_class-0_129predictors_v1_90000", "statistics": {"maximum": 95.0, "mean": 10.650257834074, "minimum": 0.0, "stddev": 15.087440482216, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level1_class-0_129predictors_v1_90000.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-C_71predictors_v1_30100.tif": {"eo:bands": [{"name": "Level2_class-C_71predictors_v1_30100"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/b23e558808a2e7a7daeddeaaa7c60cf2/openEO_Level2_class-C_71predictors_v1_30100.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-C_71predictors_v1_30100", "statistics": {"maximum": 85.0, "mean": 32.781732752762, "minimum": 2.0, "stddev": 14.547746237883, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-C_71predictors_v1_30100.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-C_71predictors_v1_30200.tif": {"eo:bands": [{"name": "Level2_class-C_71predictors_v1_30200"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/5922221c1e345270310e5ce9cfcc8154/openEO_Level2_class-C_71predictors_v1_30200.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-C_71predictors_v1_30200", "statistics": {"maximum": 83.0, "mean": 32.761936365333, "minimum": 2.0, "stddev": 14.835732549526, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-C_71predictors_v1_30200.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-C_71predictors_v1_30300.tif": {"eo:bands": [{"name": "Level2_class-C_71predictors_v1_30300"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/516615d51664887a9ff48816f1c93b29/openEO_Level2_class-C_71predictors_v1_30300.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-C_71predictors_v1_30300", "statistics": {"maximum": 84.0, "mean": 32.956187668475, "minimum": 2.0, "stddev": 14.819910981039, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-C_71predictors_v1_30300.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-D_68predictors_v1_40100.tif": {"eo:bands": [{"name": "Level2_class-D_68predictors_v1_40100"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/dc8cc14dbcba1c88d41e040a5934da31/openEO_Level2_class-D_68predictors_v1_40100.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-D_68predictors_v1_40100", "statistics": {"maximum": 54.0, "mean": 24.406380831955, "minimum": 8.0, "stddev": 5.1746147789621, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-D_68predictors_v1_40100.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-D_68predictors_v1_40200.tif": {"eo:bands": [{"name": "Level2_class-D_68predictors_v1_40200"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2eed7905d8e256e26b10ad578b3425c7/openEO_Level2_class-D_68predictors_v1_40200.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-D_68predictors_v1_40200", "statistics": {"maximum": 57.0, "mean": 24.200624550275, "minimum": 8.0, "stddev": 4.6204641026006, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-D_68predictors_v1_40200.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-D_68predictors_v1_40400.tif": {"eo:bands": [{"name": "Level2_class-D_68predictors_v1_40400"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/813276ef309756c491f08cfe50243905/openEO_Level2_class-D_68predictors_v1_40400.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-D_68predictors_v1_40400", "statistics": {"maximum": 54.0, "mean": 24.44404746103, "minimum": 8.0, "stddev": 4.5108079293116, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-D_68predictors_v1_40400.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-D_68predictors_v1_40500.tif": {"eo:bands": [{"name": "Level2_class-D_68predictors_v1_40500"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/1d408c8abaa7fa0c56c8dc5be3113d47/openEO_Level2_class-D_68predictors_v1_40500.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-D_68predictors_v1_40500", "statistics": {"maximum": 57.0, "mean": 24.948485081352, "minimum": 9.0, "stddev": 6.0165962008275, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-D_68predictors_v1_40500.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50100.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50100"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/29c62dc02f3c958ce5a9741d3f19fb65/openEO_Level2_class-E_85predictors_v1_50100.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50100", "statistics": {"maximum": 50.0, "mean": 16.139696467369, "minimum": 3.0, "stddev": 6.8627715598499, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50100.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50200.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50200"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/69c32522ceed881f768b77bcbdf4ff4e/openEO_Level2_class-E_85predictors_v1_50200.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50200", "statistics": {"maximum": 52.0, "mean": 16.164631572224, "minimum": 4.0, "stddev": 6.7741368057752, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50200.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50300.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50300"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4da6ea36b03ad4938ced7cace0cd67ab/openEO_Level2_class-E_85predictors_v1_50300.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50300", "statistics": {"maximum": 48.0, "mean": 16.210173442941, "minimum": 3.0, "stddev": 6.9437007825698, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50300.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50400.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50400"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/282d7b5a9f80f2fefce883e881a4e225/openEO_Level2_class-E_85predictors_v1_50400.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50400", "statistics": {"maximum": 52.0, "mean": 16.155714415455, "minimum": 4.0, "stddev": 6.7403128589054, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50400.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50500.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50500"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/b6a3074833444d747ffcb2d79160897a/openEO_Level2_class-E_85predictors_v1_50500.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50500", "statistics": {"maximum": 52.0, "mean": 16.165447938675, "minimum": 4.0, "stddev": 6.7570972186411, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50500.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-E_85predictors_v1_50600.tif": {"eo:bands": [{"name": "Level2_class-E_85predictors_v1_50600"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/7091e2556d23d9d45d2b5cc0c823becb/openEO_Level2_class-E_85predictors_v1_50600.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-E_85predictors_v1_50600", "statistics": {"maximum": 51.0, "mean": 16.164662510317, "minimum": 3.0, "stddev": 6.6072551567096, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-E_85predictors_v1_50600.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-F_90predictors_v1_60200.tif": {"eo:bands": [{"name": "Level2_class-F_90predictors_v1_60200"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2a7947574879ec3125f974a94364e12f/openEO_Level2_class-F_90predictors_v1_60200.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-F_90predictors_v1_60200", "statistics": {"maximum": 86.0, "mean": 19.323925824425, "minimum": 1.0, "stddev": 23.795515979097, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-F_90predictors_v1_60200.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-F_90predictors_v1_60300.tif": {"eo:bands": [{"name": "Level2_class-F_90predictors_v1_60300"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/17d2549fde98b8e2374350b9319d396c/openEO_Level2_class-F_90predictors_v1_60300.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-F_90predictors_v1_60300", "statistics": {"maximum": 86.0, "mean": 19.536797867467, "minimum": 1.0, "stddev": 23.783613670733, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-F_90predictors_v1_60300.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-F_90predictors_v1_60400.tif": {"eo:bands": [{"name": "Level2_class-F_90predictors_v1_60400"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4f29eff20a36a5823a8a391c175fd455/openEO_Level2_class-F_90predictors_v1_60400.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-F_90predictors_v1_60400", "statistics": {"maximum": 86.0, "mean": 19.576752917412, "minimum": 1.0, "stddev": 23.633577700296, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-F_90predictors_v1_60400.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-F_90predictors_v1_60900.tif": {"eo:bands": [{"name": "Level2_class-F_90predictors_v1_60900"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4ad8360a930e51a0aebd650d6aacd37f/openEO_Level2_class-F_90predictors_v1_60900.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-F_90predictors_v1_60900", "statistics": {"maximum": 86.0, "mean": 19.450520508463, "minimum": 1.0, "stddev": 23.467151000318, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-F_90predictors_v1_60900.tif", "type": "image/tiff; application=geotiff"}, "openEO_Level2_class-F_90predictors_v1_61100.tif": {"eo:bands": [{"name": "Level2_class-F_90predictors_v1_61100"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/260173833b669ffda2089103f4ae28a2/openEO_Level2_class-F_90predictors_v1_61100.tif?expires=1734685255", "proj:bbox": [4831500, 2808490, 4841510, 2818500], "proj:epsg": 3035, "proj:shape": [1001, 1001], "raster:bands": [{"name": "Level2_class-F_90predictors_v1_61100", "statistics": {"maximum": 86.0, "mean": 19.610333722222, "minimum": 1.0, "stddev": 23.238509970325, "valid_percent": 100.0}}], "roles": ["data"], "title": "openEO_Level2_class-F_90predictors_v1_61100.tif", "type": "image/tiff; application=geotiff"}}, "description": "Results for batch job j-2412134d0a664b9c87b62d34aa39a6d6", "extent": {"spatial": {"bbox": [[16.872274590854268, 48.167606915755556, 17.018625883702434, 48.26557906910205]]}, "temporal": {"interval": [["2021-01-01T00:00:00Z", "2021-02-01T00:00:00Z"]]}}, "id": "j-2412134d0a664b9c87b62d34aa39a6d6", "license": "proprietary", "links": [{"href": "/eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110319T164209_20140125T050055_ADS_000000_2VXJ.DEM", "rel": "derived_from", "title": "Derived from /eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110319T164209_20140125T050055_ADS_000000_2VXJ.DEM", "type": "application/json"}, {"href": "/eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110524T164113_20140403T164309_ADS_000000_BkSe.DEM", "rel": "derived_from", "title": "Derived from /eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110524T164113_20140403T164309_ADS_000000_BkSe.DEM", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051006_20210127T051031_036319_0442F1_983C_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051006_20210115T051031_036144_043CD9_80CB_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/22/S1A_IW_GRDH_1SDV_20210122T050205_20210122T050230_036246_04406B_F294_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/15/S1A_IW_GRDH_1SDV_20210115T051011_20210115T051036_036144_043CD9_760F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/28/S1B_IW_GRDH_1SDV_20210128T050111_20210128T050136_025350_0304E4_9B19_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051007_20210103T051032_035969_0436B5_950D_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/09/S1B_IW_GRDH_1SDV_20210109T050936_20210109T051001_025073_02FC03_1738_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/16/S1B_IW_GRDH_1SDV_20210116T050112_20210116T050137_025175_02FF56_2880_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/03/S1A_IW_GRDH_1SDV_20210103T051012_20210103T051037_035969_0436B5_D89F_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/04/S1B_IW_GRDH_1SDV_20210104T050112_20210104T050137_025000_02F9B4_E6AA_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/27/S1A_IW_GRDH_1SDV_20210127T051008_20210127T051033_036319_0442F1_F111_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/10/S1A_IW_GRDH_1SDV_20210110T050206_20210110T050231_036071_043A50_4D78_COG.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-1/SAR/IW_GRDH_1S-COG/2021/01/21/S1B_IW_GRDH_1SDV_20210121T050935_20210121T051000_025248_03019B_40AE_COG.SAFE", "type": "application/json"}, {"href": "WENR", "rel": "derived_from", "title": "Derived from WENR", "type": "application/json"}, {"href": "WENR", "rel": "derived_from", "title": "Derived from WENR", "type": "application/json"}, {"href": "WENR", "rel": "derived_from", "title": "Derived from WENR", "type": "application/json"}, {"href": "WENR", "rel": "derived_from", "title": "Derived from WENR", "type": "application/json"}, {"href": "WENR", "rel": "derived_from", "title": "Derived from WENR", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/15/S2B_MSIL2A_20210115T100249_N0500_R122_T33UXP_20230608T103558.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/25/S2B_MSIL2A_20210125T100209_N0500_R122_T33UXP_20230523T042704.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/20/S2A_MSIL2A_20210120T100331_N0500_R122_T33UXP_20230603T170603.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/27/S2A_MSIL2A_20210127T095251_N0500_R079_T33UXP_20230528T075031.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/07/S2A_MSIL2A_20210107T095401_N0500_R079_T33UXP_20230409T032440.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/17/S2A_MSIL2A_20210117T095341_N0500_R079_T33UXP_20230528T081930.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/10/S2A_MSIL2A_20210110T100401_N0500_R122_T33UXP_20230603T062203.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2021/01/30/S2A_MSIL2A_20210130T100241_N0500_R122_T33UXP_20230523T213037.SAFE", "type": "application/json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results", "rel": "self", "type": "application/json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/7e5ec7fbc05912130387fbdfca8e114e?expires=1734685255", "rel": "canonical", "type": "application/json"}, {"href": "http://ceos.org/ard/files/PFS/SR/v5.0/CARD4L_Product_Family_Specification_Surface_Reflectance-v5.0.pdf", "rel": "card4l-document", "type": "application/pdf"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/5963eff4170d26958eeda4050480582c/openEO_Level1_class-0_129predictors_v1_100000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/52b2967eafc269de9a2e8af9c0079452/openEO_Level1_class-0_129predictors_v1_110000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/148c7e20520a42dfe61102743bbc1caa/openEO_Level1_class-0_129predictors_v1_30000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/3ef81ff69e45aa7f2fb45741966ad887/openEO_Level1_class-0_129predictors_v1_40000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/d9edf27cb8a864a0d9ace7b3bd7cd2c6/openEO_Level1_class-0_129predictors_v1_50000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4113e3bef41bd731d34e041db57ad79d/openEO_Level1_class-0_129predictors_v1_60000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/ac7f28421543edf92d1eeb89c5981aa8/openEO_Level1_class-0_129predictors_v1_70000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2294b7f44364a5289e97cb58ee017138/openEO_Level1_class-0_129predictors_v1_80000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/0b8af17b07b4bfdab5612bc4c3b46e16/openEO_Level1_class-0_129predictors_v1_90000.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/b23e558808a2e7a7daeddeaaa7c60cf2/openEO_Level2_class-C_71predictors_v1_30100.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/5922221c1e345270310e5ce9cfcc8154/openEO_Level2_class-C_71predictors_v1_30200.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/516615d51664887a9ff48816f1c93b29/openEO_Level2_class-C_71predictors_v1_30300.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/dc8cc14dbcba1c88d41e040a5934da31/openEO_Level2_class-D_68predictors_v1_40100.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2eed7905d8e256e26b10ad578b3425c7/openEO_Level2_class-D_68predictors_v1_40200.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/813276ef309756c491f08cfe50243905/openEO_Level2_class-D_68predictors_v1_40400.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/1d408c8abaa7fa0c56c8dc5be3113d47/openEO_Level2_class-D_68predictors_v1_40500.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/29c62dc02f3c958ce5a9741d3f19fb65/openEO_Level2_class-E_85predictors_v1_50100.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/69c32522ceed881f768b77bcbdf4ff4e/openEO_Level2_class-E_85predictors_v1_50200.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4da6ea36b03ad4938ced7cace0cd67ab/openEO_Level2_class-E_85predictors_v1_50300.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/282d7b5a9f80f2fefce883e881a4e225/openEO_Level2_class-E_85predictors_v1_50400.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/b6a3074833444d747ffcb2d79160897a/openEO_Level2_class-E_85predictors_v1_50500.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/7091e2556d23d9d45d2b5cc0c823becb/openEO_Level2_class-E_85predictors_v1_50600.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/2a7947574879ec3125f974a94364e12f/openEO_Level2_class-F_90predictors_v1_60200.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/17d2549fde98b8e2374350b9319d396c/openEO_Level2_class-F_90predictors_v1_60300.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4f29eff20a36a5823a8a391c175fd455/openEO_Level2_class-F_90predictors_v1_60400.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/4ad8360a930e51a0aebd650d6aacd37f/openEO_Level2_class-F_90predictors_v1_60900.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2412134d0a664b9c87b62d34aa39a6d6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/260173833b669ffda2089103f4ae28a2/openEO_Level2_class-F_90predictors_v1_61100.tif?expires=1734685255", "rel": "item", "type": "application/geo+json"}], "openeo:status": "finished", "providers": [{"description": "This data was processed on an openEO backend maintained by VITO.", "name": "VITO", "processing:expression": {"expression": {"aggregatetemporalperiod1": {"arguments": {"data": {"from_node": "mask1"}, "period": "dekad", "reducer": {"process_graph": {"median1": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "median", "result": true}}}}, "process_id": "aggregate_temporal_period"}, "aggregatetemporalperiod2": {"arguments": {"data": {"from_node": "resamplespatial2"}, "period": "dekad", "reducer": {"process_graph": {"mean1": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "mean", "result": true}}}}, "process_id": "aggregate_temporal_period"}, "apply1": {"arguments": {"data": {"from_node": "aggregatetemporalperiod1"}, "process": {"process_graph": {"linearscalerange1": {"arguments": {"inputMax": 65534, "inputMin": 0, "outputMax": 65534, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply2": {"arguments": {"data": {"from_node": "apply1"}, "process": {"process_graph": {"linearscalerange2": {"arguments": {"inputMax": 10000, "inputMin": 0, "outputMax": 1, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply3": {"arguments": {"data": {"from_node": "applydimension2"}, "process": {"process_graph": {"linearscalerange3": {"arguments": {"inputMax": 65534, "inputMin": 1, "outputMax": 65534, "outputMin": 1, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply4": {"arguments": {"data": {"from_node": "renamelabels5"}, "process": {"process_graph": {"linearscalerange4": {"arguments": {"inputMax": 100, "inputMin": 0, "outputMax": 100, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply5": {"arguments": {"data": {"from_node": "renamelabels6"}, "process": {"process_graph": {"linearscalerange5": {"arguments": {"inputMax": 100, "inputMin": 0, "outputMax": 100, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply6": {"arguments": {"data": {"from_node": "renamelabels7"}, "process": {"process_graph": {"linearscalerange6": {"arguments": {"inputMax": 100, "inputMin": 0, "outputMax": 100, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply7": {"arguments": {"data": {"from_node": "renamelabels8"}, "process": {"process_graph": {"linearscalerange7": {"arguments": {"inputMax": 100, "inputMin": 0, "outputMax": 100, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "apply8": {"arguments": {"data": {"from_node": "renamelabels9"}, "process": {"process_graph": {"linearscalerange8": {"arguments": {"inputMax": 100, "inputMin": 0, "outputMax": 100, "outputMin": 0, "x": {"from_parameter": "x"}}, "process_id": "linear_scale_range", "result": true}}}}, "process_id": "apply"}, "applydimension1": {"arguments": {"data": {"from_node": "apply2"}, "dimension": "bands", "process": {"process_graph": {"add1": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add10": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement4"}}, "process_id": "add"}, "add11": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add12": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement4"}}, "process_id": "add"}, "add13": {"arguments": {"x": {"from_node": "arrayelement3"}, "y": {"from_node": "arrayelement6"}}, "process_id": "add"}, "add14": {"arguments": {"x": {"from_node": "arrayelement7"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add15": {"arguments": {"x": 705, "y": {"from_node": "multiply4"}}, "process_id": "add"}, "add2": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add3": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement4"}}, "process_id": "add"}, "add4": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement1"}}, "process_id": "add"}, "add5": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add6": {"arguments": {"x": {"from_node": "add5"}, "y": {"from_node": "arrayelement6"}}, "process_id": "add"}, "add7": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement2"}}, "process_id": "add"}, "add8": {"arguments": {"x": {"from_node": "add7"}, "y": {"from_node": "arrayelement6"}}, "process_id": "add"}, "add9": {"arguments": {"x": {"from_node": "divide7"}, "y": {"from_node": "arrayelement4"}}, "process_id": "add"}, "arrayelement1": {"arguments": {"data": {"from_parameter": "data"}, "index": 6}, "process_id": "array_element"}, "arrayelement2": {"arguments": {"data": {"from_parameter": "data"}, "index": 2}, "process_id": "array_element"}, "arrayelement3": {"arguments": {"data": {"from_parameter": "data"}, "index": 3}, "process_id": "array_element"}, "arrayelement4": {"arguments": {"data": {"from_parameter": "data"}, "index": 8}, "process_id": "array_element"}, "arrayelement5": {"arguments": {"data": {"from_parameter": "data"}, "index": 1}, "process_id": "array_element"}, "arrayelement6": {"arguments": {"data": {"from_parameter": "data"}, "index": 9}, "process_id": "array_element"}, "arrayelement7": {"arguments": {"data": {"from_parameter": "data"}, "index": 5}, "process_id": "array_element"}, "arrayelement8": {"arguments": {"data": {"from_parameter": "data"}, "index": 4}, "process_id": "array_element"}, "arraymodify1": {"arguments": {"data": {"from_parameter": "data"}, "index": 10, "values": [{"from_node": "divide1"}, {"from_node": "power1"}, {"from_node": "subtract4"}, {"from_node": "multiply3"}, {"from_node": "divide4"}, {"from_node": "divide5"}, {"from_node": "divide8"}, {"from_node": "divide9"}, {"from_node": "subtract12"}, {"from_node": "divide12"}, {"from_node": "add15"}, {"from_node": "divide16"}]}, "process_id": "array_modify", "result": true}, "divide1": {"arguments": {"x": {"from_node": "subtract1"}, "y": {"from_node": "add1"}}, "process_id": "divide"}, "divide10": {"arguments": {"x": {"from_node": "subtract10"}, "y": {"from_node": "add11"}}, "process_id": "divide"}, "divide11": {"arguments": {"x": {"from_node": "subtract11"}, "y": {"from_node": "add12"}}, "process_id": "divide"}, "divide12": {"arguments": {"x": {"from_node": "subtract13"}, "y": {"from_node": "add13"}}, "process_id": "divide"}, "divide13": {"arguments": {"x": {"from_node": "add14"}, "y": 2}, "process_id": "divide"}, "divide14": {"arguments": {"x": {"from_node": "subtract14"}, "y": {"from_node": "subtract15"}}, "process_id": "divide"}, "divide15": {"arguments": {"x": {"from_node": "arrayelement3"}, "y": {"from_node": "arrayelement8"}}, "process_id": "divide"}, "divide16": {"arguments": {"x": {"from_node": "subtract16"}, "y": {"from_node": "divide15"}}, "process_id": "divide"}, "divide2": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement3"}}, "process_id": "divide"}, "divide3": {"arguments": {"x": {"from_node": "subtract5"}, "y": {"from_node": "add2"}}, "process_id": "divide"}, "divide4": {"arguments": {"x": {"from_node": "subtract6"}, "y": {"from_node": "add3"}}, "process_id": "divide"}, "divide5": {"arguments": {"x": {"from_node": "subtract7"}, "y": {"from_node": "add4"}}, "process_id": "divide"}, "divide6": {"arguments": {"x": {"from_node": "add6"}, "y": 3}, "process_id": "divide"}, "divide7": {"arguments": {"x": {"from_node": "add8"}, "y": 3}, "process_id": "divide"}, "divide8": {"arguments": {"x": {"from_node": "subtract8"}, "y": {"from_node": "add9"}}, "process_id": "divide"}, "divide9": {"arguments": {"x": {"from_node": "subtract9"}, "y": {"from_node": "add10"}}, "process_id": "divide"}, "multiply1": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "subtract2"}}, "process_id": "multiply"}, "multiply2": {"arguments": {"x": {"from_node": "multiply1"}, "y": {"from_node": "subtract3"}}, "process_id": "multiply"}, "multiply3": {"arguments": {"x": {"from_node": "divide3"}, "y": {"from_node": "arrayelement1"}}, "process_id": "multiply"}, "multiply4": {"arguments": {"x": 35, "y": {"from_node": "divide14"}}, "process_id": "multiply"}, "power1": {"arguments": {"base": {"from_node": "multiply2"}, "p": 0.3333333333333333}, "process_id": "power"}, "subtract1": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract10": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract11": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement4"}}, "process_id": "subtract"}, "subtract12": {"arguments": {"x": {"from_node": "divide10"}, "y": {"from_node": "divide11"}}, "process_id": "subtract"}, "subtract13": {"arguments": {"x": {"from_node": "arrayelement3"}, "y": {"from_node": "arrayelement6"}}, "process_id": "subtract"}, "subtract14": {"arguments": {"x": {"from_node": "divide13"}, "y": {"from_node": "arrayelement3"}}, "process_id": "subtract"}, "subtract15": {"arguments": {"x": {"from_node": "arrayelement8"}, "y": {"from_node": "arrayelement3"}}, "process_id": "subtract"}, "subtract16": {"arguments": {"x": {"from_node": "arrayelement7"}, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract2": {"arguments": {"x": 1, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract3": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract4": {"arguments": {"x": {"from_node": "divide2"}, "y": 1}, "process_id": "subtract"}, "subtract5": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement2"}}, "process_id": "subtract"}, "subtract6": {"arguments": {"x": {"from_node": "arrayelement1"}, "y": {"from_node": "arrayelement4"}}, "process_id": "subtract"}, "subtract7": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement1"}}, "process_id": "subtract"}, "subtract8": {"arguments": {"x": {"from_node": "divide6"}, "y": {"from_node": "arrayelement4"}}, "process_id": "subtract"}, "subtract9": {"arguments": {"x": {"from_node": "arrayelement5"}, "y": {"from_node": "arrayelement4"}}, "process_id": "subtract"}}}}, "process_id": "apply_dimension"}, "applydimension10": {"arguments": {"data": {"from_node": "filterbands6"}, "dimension": "bands", "process": {"process_graph": {"runudf5": {"arguments": {"context": {"model_url": "https://s3.waw3-1.cloudferro.com/swift/v1/ecdc-waw3-1-ekqouvq3otv8hmw0njzuvo0g4dy0ys8r985n7dggjis3erkpn5o/models/Level2_class-F_90predictors_v1.onnx"}, "data": {"from_parameter": "data"}, "runtime": "Python", "udf": "# /// script\n# dependencies = [\n# \"filelock\",\n# \"onnxruntime\",\n# ]\n# ///\n\nimport os\nimport functools\nimport requests\nimport tempfile\nimport onnxruntime as ort\nimport xarray as xr\nimport numpy as np\nimport shutil\nfrom urllib.parse import urlparse\nfrom openeo.udf import inspect\nfrom typing import Dict\nfrom filelock import FileLock\n\n\ndef is_zip_file(url: str) -> bool:\n    \"\"\"Check if the URL points to a ZIP file.\"\"\"\n    return url.lower().endswith('.zip')\n\ndef is_onnx_file(file_path: str) -> bool:\n    \"\"\"Check if the file is an ONNX model based on its extension.\"\"\"\n    return file_path.endswith('.onnx')\n    \ndef download_file_with_lock(url: str, max_file_size_mb: int = 100, cache_dir: str = '/tmp/cache') -> str:\n    \"\"\"Download a file with concurrency protection and store it temporarily.\"\"\"\n    \n    # Extract the file name from the URL (e.g., \"model_1.onnx\")\n    file_name = os.path.basename(urlparse(url).path)\n    \n    # Construct the file path within the cache directory (e.g., '/tmp/cache/model.onnx')\n    file_path = os.path.join(cache_dir, file_name)\n    \n    # Lock file to prevent concurrent downloads\n    lock_path = file_path + '.download.lock'\n    lock = FileLock(lock_path)\n    \n    with lock:\n        # Check if the file already exists in the cache\n        if os.path.exists(file_path):\n            print(f\"File {file_path} already exists in cache.\")\n            return file_path\n        \n        try:\n            # Download the file to a temporary location\n            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".onnx\")\n            temp_file_path = temp_file.name  # Store the temporary file path\n            \n            inspect(message=f\"Downloading file from {url}...\")\n            response = requests.get(url, stream=True)\n            if response.status_code == 200:\n                file_size = 0\n                with temp_file:\n                    for chunk in response.iter_content(chunk_size=1024):\n                        temp_file.write(chunk)\n                        file_size += len(chunk)\n                        if file_size > max_file_size_mb * 1024 * 1024:\n                            raise ValueError(f\"Downloaded file exceeds the size limit of {max_file_size_mb} MB\")\n\n                inspect(message=f\"Downloaded file to {temp_file_path}\")\n                \n                # After download is complete, move the file from temp to the final destination\n                shutil.move(temp_file_path, file_path)  # Move the file to final location\n\n                return file_path  # Return path of the final model file\n\n            else:\n                raise ValueError(f\"Failed to download file, status code: {response.status_code}\")\n\n        except Exception as e:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)  # Clean up temporary file on error\n            raise ValueError(f\"Error downloading file: {e}\")\n\n@functools.lru_cache(maxsize=5)\ndef load_onnx_model(model_url: str, cache_dir: str = '/tmp/cache') -> ort.InferenceSession:\n    \"\"\"\n    Load an ONNX model into an ONNX Runtime session.\n\n    Args:\n        model_url (str): The URL or file path to the ONNX model.\n        cache_dir (str): Directory for caching or processing model files.\n\n    Returns:\n        ort.InferenceSession: The ONNX Runtime session for the loaded model.\n\n    Raises:\n        ValueError: If the model file cannot be processed or loaded.\n    \"\"\"\n    try:\n        # Process the model file to ensure it's a valid ONNX model\n        model_path = download_file_with_lock(model_url, cache_dir=cache_dir)\n\n        # Initialize the ONNX Runtime session\n        inspect(message=f\"Initializing ONNX Runtime session for model at {model_path}...\")\n        ort_session = ort.InferenceSession(model_path, providers=[\"CPUExecutionProvider\"])\n        inspect(message=\"ONNX model successfully loaded into ONNX Runtime session.\")\n        return ort_session\n\n    except Exception as e:\n        raise ValueError(f\"Failed to load the ONNX model from {model_url}. Error: {e}\")\n\ndef preprocess_input(input_xr: xr.DataArray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Preprocess the input DataArray by ensuring the dimensions are in the correct order,\n    reshaping it, and returning the reshaped numpy array and the original shape.\n    \"\"\"\n    inspect(message=f\"Preprocessing the input\")\n    input_xr = input_xr.transpose(\"y\", \"x\", \"bands\")\n    input_shape = input_xr.shape\n    input_np = input_xr.values.reshape(-1, ort_session.get_inputs()[0].shape[1])\n    return input_np, input_shape\n\ndef run_inference(input_np: np.ndarray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Run inference using the ONNX runtime session and return predicted labels and probabilities.\n    \"\"\"\n    inspect(message=f\"Running inference\")\n    ort_inputs = {ort_session.get_inputs()[0].name: input_np}\n    ort_outputs = ort_session.run(None, ort_inputs)\n    predicted_labels = ort_outputs[0]\n    probabilities_dicts = ort_outputs[1]\n    return predicted_labels, probabilities_dicts\n\ndef postprocess_output(predicted_labels: np.ndarray, probabilities_dicts: list, input_shape: tuple) -> tuple:\n    \"\"\"\n    Postprocess the output by reshaping the predicted labels and probabilities into the original spatial structure.\n    \"\"\"\n\n    inspect(message=f\"Postprocessing the output\")\n    class_labels = list(probabilities_dicts[0].keys())\n\n    # Convert probabilities into a 2D array\n    probabilities = np.array([[prob[class_id] for class_id in class_labels] for prob in probabilities_dicts])\n\n    # Reshape to match the (y, x) spatial structure\n    predicted_labels = predicted_labels.reshape(input_shape[0], input_shape[1])\n    probabilities = probabilities.reshape(len(class_labels), input_shape[0], input_shape[1])\n    probabilities = (probabilities / probabilities.sum(axis=0, keepdims=True)) * 100\n\n\n    return predicted_labels, probabilities\n\ndef create_output_xarray(predicted_labels: np.ndarray, probabilities: np.ndarray, \n                         input_xr: xr.DataArray) -> xr.DataArray:\n    \"\"\"\n    Create an xarray DataArray with predicted labels and probabilities stacked along the bands dimension.\n    \"\"\"\n    inspect(message=f\"Ceating output xarray\")\n    #combined_data = np.concatenate([\n    #    predicted_labels[np.newaxis, :, :],  # Shape (1, y, x) for predicted labels\n    #    probabilities  # Shape (n_classes, y, x) for probabilities\n    #], axis=0)\n\n    return xr.DataArray(\n        probabilities,\n        dims=[\"bands\", \"y\", \"x\"],\n        coords={\n            'y': input_xr.coords['y'],\n            'x': input_xr.coords['x']\n        }\n    )\n\ndef apply_model(input_xr: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Run inference on the given input data using the provided ONNX runtime session.\n    This method is called for each timestep in the chunk received by apply_datacube.\n    \"\"\"\n    # Step 1: Load the ONNX model\n    try:\n        ort_session = load_onnx_model(context.get(\"model_url\"), cache_dir=\"/tmp/cache\")\n    except ValueError as e:\n        raise RuntimeError(f\"Model loading failed: {e}\")\n\n    # Step 2: Preprocess the input\n    input_np, input_shape = preprocess_input(input_xr, ort_session)\n\n    # Step 3: Perform inference\n    predicted_labels, probabilities_dicts = run_inference(input_np, ort_session)\n\n    # Step 4: Postprocess the output\n    predicted_labels, probabilities = postprocess_output(predicted_labels, probabilities_dicts, input_shape)\n\n    # Step 5: Create the output xarray\n    return create_output_xarray(predicted_labels, probabilities, input_xr)\n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Function that is called for each chunk of data that is processed.\n    The function name and arguments are defined by the UDF API.\n    \n    More information can be found here: \n    https://open-eo.github.io/openeo-python-client/udf.html#udf-function-names-and-signatures\n\n    CAVEAT: Some users tend to extract the underlying numpy array and preprocess it for the model using Numpy functions.\n        The order of the dimensions in the numpy array might not be the same for each back-end or when running a udf locally, \n        which can lead to unexpected results. \n\n        It is recommended to use the named dimensions of the xarray DataArray to avoid this issue.\n        The order of the dimensions can be changed using the transpose method.\n        While it is a better practice to do preprocessing using openeo processes, most operations are also available in Xarray. \n    \"\"\"\n    # Define how you want to handle nan values\n    cube = cube.fillna(0)\n    cube = cube.astype('float32')\n\n    # Apply the model for each timestep in the chunk\n    output_data = apply_model(cube, context)\n\n    return output_data"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "applydimension2": {"arguments": {"data": {"from_node": "aggregatetemporalperiod2"}, "dimension": "bands", "process": {"process_graph": {"add16": {"arguments": {"x": {"from_node": "multiply5"}, "y": 83}, "process_id": "add"}, "add17": {"arguments": {"x": {"from_node": "multiply6"}, "y": 83}, "process_id": "add"}, "arraycreate1": {"arguments": {"data": [{"from_node": "if1"}, {"from_node": "if2"}]}, "process_id": "array_create", "result": true}, "arrayelement10": {"arguments": {"data": {"from_parameter": "data"}, "index": 0}, "process_id": "array_element"}, "arrayelement11": {"arguments": {"data": {"from_parameter": "data"}, "index": 1}, "process_id": "array_element"}, "arrayelement12": {"arguments": {"data": {"from_parameter": "data"}, "index": 1}, "process_id": "array_element"}, "arrayelement9": {"arguments": {"data": {"from_parameter": "data"}, "index": 0}, "process_id": "array_element"}, "divide17": {"arguments": {"x": {"from_node": "add16"}, "y": 20}, "process_id": "divide"}, "divide18": {"arguments": {"x": {"from_node": "add17"}, "y": 20}, "process_id": "divide"}, "if1": {"arguments": {"accept": 1, "reject": {"from_node": "power2"}, "value": {"from_node": "isnodata1"}}, "process_id": "if"}, "if2": {"arguments": {"accept": 1, "reject": {"from_node": "power3"}, "value": {"from_node": "isnodata2"}}, "process_id": "if"}, "isnodata1": {"arguments": {"x": {"from_node": "arrayelement10"}}, "process_id": "is_nodata"}, "isnodata2": {"arguments": {"x": {"from_node": "arrayelement12"}}, "process_id": "is_nodata"}, "log1": {"arguments": {"base": 10, "x": {"from_node": "arrayelement9"}}, "process_id": "log"}, "log2": {"arguments": {"base": 10, "x": {"from_node": "arrayelement11"}}, "process_id": "log"}, "multiply5": {"arguments": {"x": 10, "y": {"from_node": "log1"}}, "process_id": "multiply"}, "multiply6": {"arguments": {"x": 10, "y": {"from_node": "log2"}}, "process_id": "multiply"}, "power2": {"arguments": {"base": 10, "p": {"from_node": "divide17"}}, "process_id": "power"}, "power3": {"arguments": {"base": 10, "p": {"from_node": "divide18"}}, "process_id": "power"}}}}, "process_id": "apply_dimension"}, "applydimension3": {"arguments": {"data": {"from_node": "apply3"}, "dimension": "bands", "process": {"process_graph": {"arraycreate2": {"arguments": {"data": [{"from_node": "subtract17"}, {"from_node": "subtract18"}]}, "process_id": "array_create", "result": true}, "arrayelement13": {"arguments": {"data": {"from_parameter": "data"}, "index": 0}, "process_id": "array_element"}, "arrayelement14": {"arguments": {"data": {"from_parameter": "data"}, "index": 1}, "process_id": "array_element"}, "log3": {"arguments": {"base": 10, "x": {"from_node": "arrayelement13"}}, "process_id": "log"}, "log4": {"arguments": {"base": 10, "x": {"from_node": "arrayelement14"}}, "process_id": "log"}, "multiply7": {"arguments": {"x": 20, "y": {"from_node": "log3"}}, "process_id": "multiply"}, "multiply8": {"arguments": {"x": 20, "y": {"from_node": "log4"}}, "process_id": "multiply"}, "subtract17": {"arguments": {"x": {"from_node": "multiply7"}, "y": 83}, "process_id": "subtract"}, "subtract18": {"arguments": {"x": {"from_node": "multiply8"}, "y": 83}, "process_id": "subtract"}}}}, "process_id": "apply_dimension"}, "applydimension4": {"arguments": {"context": {"TileSize": 128, "parallel": true}, "data": {"from_node": "applydimension3"}, "dimension": "bands", "process": {"process_graph": {"add18": {"arguments": {"x": {"from_node": "arrayelement15"}, "y": {"from_node": "arrayelement16"}}, "process_id": "add"}, "arraycreate3": {"arguments": {"data": [{"from_node": "arrayelement15"}, {"from_node": "arrayelement16"}, {"from_node": "divide19"}, {"from_node": "subtract19"}, {"from_node": "divide20"}]}, "process_id": "array_create", "result": true}, "arrayelement15": {"arguments": {"data": {"from_parameter": "data"}, "label": "VV"}, "process_id": "array_element"}, "arrayelement16": {"arguments": {"data": {"from_parameter": "data"}, "label": "VH"}, "process_id": "array_element"}, "divide19": {"arguments": {"x": {"from_node": "multiply9"}, "y": {"from_node": "add18"}}, "process_id": "divide"}, "divide20": {"arguments": {"x": {"from_node": "arrayelement16"}, "y": {"from_node": "arrayelement15"}}, "process_id": "divide"}, "multiply9": {"arguments": {"x": 4, "y": {"from_node": "arrayelement16"}}, "process_id": "multiply"}, "subtract19": {"arguments": {"x": {"from_node": "arrayelement16"}, "y": {"from_node": "arrayelement15"}}, "process_id": "subtract"}}}}, "process_id": "apply_dimension"}, "applydimension5": {"arguments": {"context": {"TileSize": 128, "parallel": true}, "data": {"from_node": "mergecubes1"}, "dimension": "t", "process": {"process_graph": {"arrayconcat1": {"arguments": {"array1": {"from_node": "quantiles1"}, "array2": [{"from_node": "mean2"}, {"from_node": "sd1"}, {"from_node": "sum1"}, {"from_node": "subtract20"}]}, "process_id": "array_concat", "result": true}, "mean2": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "mean"}, "quantiles1": {"arguments": {"data": {"from_parameter": "data"}, "probabilities": [0.02, 0.25, 0.5, 0.75, 0.98]}, "process_id": "quantiles"}, "quantiles2": {"arguments": {"data": {"from_parameter": "data"}, "probabilities": [0.75]}, "process_id": "quantiles"}, "quantiles3": {"arguments": {"data": {"from_parameter": "data"}, "probabilities": [0.25]}, "process_id": "quantiles"}, "sd1": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "sd"}, "subtract20": {"arguments": {"x": {"from_node": "quantiles2"}, "y": {"from_node": "quantiles3"}}, "process_id": "subtract"}, "sum1": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "sum"}}}, "target_dimension": "bands"}, "process_id": "apply_dimension"}, "applydimension6": {"arguments": {"data": {"from_node": "filterbands2"}, "dimension": "bands", "process": {"process_graph": {"runudf1": {"arguments": {"context": {"model_url": "https://s3.waw3-1.cloudferro.com/swift/v1/ecdc-waw3-1-ekqouvq3otv8hmw0njzuvo0g4dy0ys8r985n7dggjis3erkpn5o/models/Level1_class-0_129predictors_v1.onnx"}, "data": {"from_parameter": "data"}, "runtime": "Python", "udf": "# /// script\n# dependencies = [\n# \"filelock\",\n# \"onnxruntime\",\n# ]\n# ///\n\nimport os\nimport functools\nimport requests\nimport tempfile\nimport onnxruntime as ort\nimport xarray as xr\nimport numpy as np\nimport shutil\nfrom urllib.parse import urlparse\nfrom openeo.udf import inspect\nfrom typing import Dict\nfrom filelock import FileLock\n\n\ndef is_zip_file(url: str) -> bool:\n    \"\"\"Check if the URL points to a ZIP file.\"\"\"\n    return url.lower().endswith('.zip')\n\ndef is_onnx_file(file_path: str) -> bool:\n    \"\"\"Check if the file is an ONNX model based on its extension.\"\"\"\n    return file_path.endswith('.onnx')\n    \ndef download_file_with_lock(url: str, max_file_size_mb: int = 100, cache_dir: str = '/tmp/cache') -> str:\n    \"\"\"Download a file with concurrency protection and store it temporarily.\"\"\"\n    \n    # Extract the file name from the URL (e.g., \"model_1.onnx\")\n    file_name = os.path.basename(urlparse(url).path)\n    \n    # Construct the file path within the cache directory (e.g., '/tmp/cache/model.onnx')\n    file_path = os.path.join(cache_dir, file_name)\n    \n    # Lock file to prevent concurrent downloads\n    lock_path = file_path + '.download.lock'\n    lock = FileLock(lock_path)\n    \n    with lock:\n        # Check if the file already exists in the cache\n        if os.path.exists(file_path):\n            print(f\"File {file_path} already exists in cache.\")\n            return file_path\n        \n        try:\n            # Download the file to a temporary location\n            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".onnx\")\n            temp_file_path = temp_file.name  # Store the temporary file path\n            \n            inspect(message=f\"Downloading file from {url}...\")\n            response = requests.get(url, stream=True)\n            if response.status_code == 200:\n                file_size = 0\n                with temp_file:\n                    for chunk in response.iter_content(chunk_size=1024):\n                        temp_file.write(chunk)\n                        file_size += len(chunk)\n                        if file_size > max_file_size_mb * 1024 * 1024:\n                            raise ValueError(f\"Downloaded file exceeds the size limit of {max_file_size_mb} MB\")\n\n                inspect(message=f\"Downloaded file to {temp_file_path}\")\n                \n                # After download is complete, move the file from temp to the final destination\n                shutil.move(temp_file_path, file_path)  # Move the file to final location\n\n                return file_path  # Return path of the final model file\n\n            else:\n                raise ValueError(f\"Failed to download file, status code: {response.status_code}\")\n\n        except Exception as e:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)  # Clean up temporary file on error\n            raise ValueError(f\"Error downloading file: {e}\")\n\n@functools.lru_cache(maxsize=5)\ndef load_onnx_model(model_url: str, cache_dir: str = '/tmp/cache') -> ort.InferenceSession:\n    \"\"\"\n    Load an ONNX model into an ONNX Runtime session.\n\n    Args:\n        model_url (str): The URL or file path to the ONNX model.\n        cache_dir (str): Directory for caching or processing model files.\n\n    Returns:\n        ort.InferenceSession: The ONNX Runtime session for the loaded model.\n\n    Raises:\n        ValueError: If the model file cannot be processed or loaded.\n    \"\"\"\n    try:\n        # Process the model file to ensure it's a valid ONNX model\n        model_path = download_file_with_lock(model_url, cache_dir=cache_dir)\n\n        # Initialize the ONNX Runtime session\n        inspect(message=f\"Initializing ONNX Runtime session for model at {model_path}...\")\n        ort_session = ort.InferenceSession(model_path, providers=[\"CPUExecutionProvider\"])\n        inspect(message=\"ONNX model successfully loaded into ONNX Runtime session.\")\n        return ort_session\n\n    except Exception as e:\n        raise ValueError(f\"Failed to load the ONNX model from {model_url}. Error: {e}\")\n\ndef preprocess_input(input_xr: xr.DataArray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Preprocess the input DataArray by ensuring the dimensions are in the correct order,\n    reshaping it, and returning the reshaped numpy array and the original shape.\n    \"\"\"\n    inspect(message=f\"Preprocessing the input\")\n    input_xr = input_xr.transpose(\"y\", \"x\", \"bands\")\n    input_shape = input_xr.shape\n    input_np = input_xr.values.reshape(-1, ort_session.get_inputs()[0].shape[1])\n    return input_np, input_shape\n\ndef run_inference(input_np: np.ndarray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Run inference using the ONNX runtime session and return predicted labels and probabilities.\n    \"\"\"\n    inspect(message=f\"Running inference\")\n    ort_inputs = {ort_session.get_inputs()[0].name: input_np}\n    ort_outputs = ort_session.run(None, ort_inputs)\n    predicted_labels = ort_outputs[0]\n    probabilities_dicts = ort_outputs[1]\n    return predicted_labels, probabilities_dicts\n\ndef postprocess_output(predicted_labels: np.ndarray, probabilities_dicts: list, input_shape: tuple) -> tuple:\n    \"\"\"\n    Postprocess the output by reshaping the predicted labels and probabilities into the original spatial structure.\n    \"\"\"\n\n    inspect(message=f\"Postprocessing the output\")\n    class_labels = list(probabilities_dicts[0].keys())\n\n    # Convert probabilities into a 2D array\n    probabilities = np.array([[prob[class_id] for class_id in class_labels] for prob in probabilities_dicts])\n\n    # Reshape to match the (y, x) spatial structure\n    predicted_labels = predicted_labels.reshape(input_shape[0], input_shape[1])\n    probabilities = probabilities.reshape(len(class_labels), input_shape[0], input_shape[1])\n    probabilities = (probabilities / probabilities.sum(axis=0, keepdims=True)) * 100\n\n\n    return predicted_labels, probabilities\n\ndef create_output_xarray(predicted_labels: np.ndarray, probabilities: np.ndarray, \n                         input_xr: xr.DataArray) -> xr.DataArray:\n    \"\"\"\n    Create an xarray DataArray with predicted labels and probabilities stacked along the bands dimension.\n    \"\"\"\n    inspect(message=f\"Ceating output xarray\")\n    #combined_data = np.concatenate([\n    #    predicted_labels[np.newaxis, :, :],  # Shape (1, y, x) for predicted labels\n    #    probabilities  # Shape (n_classes, y, x) for probabilities\n    #], axis=0)\n\n    return xr.DataArray(\n        probabilities,\n        dims=[\"bands\", \"y\", \"x\"],\n        coords={\n            'y': input_xr.coords['y'],\n            'x': input_xr.coords['x']\n        }\n    )\n\ndef apply_model(input_xr: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Run inference on the given input data using the provided ONNX runtime session.\n    This method is called for each timestep in the chunk received by apply_datacube.\n    \"\"\"\n    # Step 1: Load the ONNX model\n    try:\n        ort_session = load_onnx_model(context.get(\"model_url\"), cache_dir=\"/tmp/cache\")\n    except ValueError as e:\n        raise RuntimeError(f\"Model loading failed: {e}\")\n\n    # Step 2: Preprocess the input\n    input_np, input_shape = preprocess_input(input_xr, ort_session)\n\n    # Step 3: Perform inference\n    predicted_labels, probabilities_dicts = run_inference(input_np, ort_session)\n\n    # Step 4: Postprocess the output\n    predicted_labels, probabilities = postprocess_output(predicted_labels, probabilities_dicts, input_shape)\n\n    # Step 5: Create the output xarray\n    return create_output_xarray(predicted_labels, probabilities, input_xr)\n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Function that is called for each chunk of data that is processed.\n    The function name and arguments are defined by the UDF API.\n    \n    More information can be found here: \n    https://open-eo.github.io/openeo-python-client/udf.html#udf-function-names-and-signatures\n\n    CAVEAT: Some users tend to extract the underlying numpy array and preprocess it for the model using Numpy functions.\n        The order of the dimensions in the numpy array might not be the same for each back-end or when running a udf locally, \n        which can lead to unexpected results. \n\n        It is recommended to use the named dimensions of the xarray DataArray to avoid this issue.\n        The order of the dimensions can be changed using the transpose method.\n        While it is a better practice to do preprocessing using openeo processes, most operations are also available in Xarray. \n    \"\"\"\n    # Define how you want to handle nan values\n    cube = cube.fillna(0)\n    cube = cube.astype('float32')\n\n    # Apply the model for each timestep in the chunk\n    output_data = apply_model(cube, context)\n\n    return output_data"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "applydimension7": {"arguments": {"data": {"from_node": "filterbands3"}, "dimension": "bands", "process": {"process_graph": {"runudf2": {"arguments": {"context": {"model_url": "https://s3.waw3-1.cloudferro.com/swift/v1/ecdc-waw3-1-ekqouvq3otv8hmw0njzuvo0g4dy0ys8r985n7dggjis3erkpn5o/models/Level2_class-C_71predictors_v1.onnx"}, "data": {"from_parameter": "data"}, "runtime": "Python", "udf": "# /// script\n# dependencies = [\n# \"filelock\",\n# \"onnxruntime\",\n# ]\n# ///\n\nimport os\nimport functools\nimport requests\nimport tempfile\nimport onnxruntime as ort\nimport xarray as xr\nimport numpy as np\nimport shutil\nfrom urllib.parse import urlparse\nfrom openeo.udf import inspect\nfrom typing import Dict\nfrom filelock import FileLock\n\n\ndef is_zip_file(url: str) -> bool:\n    \"\"\"Check if the URL points to a ZIP file.\"\"\"\n    return url.lower().endswith('.zip')\n\ndef is_onnx_file(file_path: str) -> bool:\n    \"\"\"Check if the file is an ONNX model based on its extension.\"\"\"\n    return file_path.endswith('.onnx')\n    \ndef download_file_with_lock(url: str, max_file_size_mb: int = 100, cache_dir: str = '/tmp/cache') -> str:\n    \"\"\"Download a file with concurrency protection and store it temporarily.\"\"\"\n    \n    # Extract the file name from the URL (e.g., \"model_1.onnx\")\n    file_name = os.path.basename(urlparse(url).path)\n    \n    # Construct the file path within the cache directory (e.g., '/tmp/cache/model.onnx')\n    file_path = os.path.join(cache_dir, file_name)\n    \n    # Lock file to prevent concurrent downloads\n    lock_path = file_path + '.download.lock'\n    lock = FileLock(lock_path)\n    \n    with lock:\n        # Check if the file already exists in the cache\n        if os.path.exists(file_path):\n            print(f\"File {file_path} already exists in cache.\")\n            return file_path\n        \n        try:\n            # Download the file to a temporary location\n            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".onnx\")\n            temp_file_path = temp_file.name  # Store the temporary file path\n            \n            inspect(message=f\"Downloading file from {url}...\")\n            response = requests.get(url, stream=True)\n            if response.status_code == 200:\n                file_size = 0\n                with temp_file:\n                    for chunk in response.iter_content(chunk_size=1024):\n                        temp_file.write(chunk)\n                        file_size += len(chunk)\n                        if file_size > max_file_size_mb * 1024 * 1024:\n                            raise ValueError(f\"Downloaded file exceeds the size limit of {max_file_size_mb} MB\")\n\n                inspect(message=f\"Downloaded file to {temp_file_path}\")\n                \n                # After download is complete, move the file from temp to the final destination\n                shutil.move(temp_file_path, file_path)  # Move the file to final location\n\n                return file_path  # Return path of the final model file\n\n            else:\n                raise ValueError(f\"Failed to download file, status code: {response.status_code}\")\n\n        except Exception as e:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)  # Clean up temporary file on error\n            raise ValueError(f\"Error downloading file: {e}\")\n\n@functools.lru_cache(maxsize=5)\ndef load_onnx_model(model_url: str, cache_dir: str = '/tmp/cache') -> ort.InferenceSession:\n    \"\"\"\n    Load an ONNX model into an ONNX Runtime session.\n\n    Args:\n        model_url (str): The URL or file path to the ONNX model.\n        cache_dir (str): Directory for caching or processing model files.\n\n    Returns:\n        ort.InferenceSession: The ONNX Runtime session for the loaded model.\n\n    Raises:\n        ValueError: If the model file cannot be processed or loaded.\n    \"\"\"\n    try:\n        # Process the model file to ensure it's a valid ONNX model\n        model_path = download_file_with_lock(model_url, cache_dir=cache_dir)\n\n        # Initialize the ONNX Runtime session\n        inspect(message=f\"Initializing ONNX Runtime session for model at {model_path}...\")\n        ort_session = ort.InferenceSession(model_path, providers=[\"CPUExecutionProvider\"])\n        inspect(message=\"ONNX model successfully loaded into ONNX Runtime session.\")\n        return ort_session\n\n    except Exception as e:\n        raise ValueError(f\"Failed to load the ONNX model from {model_url}. Error: {e}\")\n\ndef preprocess_input(input_xr: xr.DataArray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Preprocess the input DataArray by ensuring the dimensions are in the correct order,\n    reshaping it, and returning the reshaped numpy array and the original shape.\n    \"\"\"\n    inspect(message=f\"Preprocessing the input\")\n    input_xr = input_xr.transpose(\"y\", \"x\", \"bands\")\n    input_shape = input_xr.shape\n    input_np = input_xr.values.reshape(-1, ort_session.get_inputs()[0].shape[1])\n    return input_np, input_shape\n\ndef run_inference(input_np: np.ndarray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Run inference using the ONNX runtime session and return predicted labels and probabilities.\n    \"\"\"\n    inspect(message=f\"Running inference\")\n    ort_inputs = {ort_session.get_inputs()[0].name: input_np}\n    ort_outputs = ort_session.run(None, ort_inputs)\n    predicted_labels = ort_outputs[0]\n    probabilities_dicts = ort_outputs[1]\n    return predicted_labels, probabilities_dicts\n\ndef postprocess_output(predicted_labels: np.ndarray, probabilities_dicts: list, input_shape: tuple) -> tuple:\n    \"\"\"\n    Postprocess the output by reshaping the predicted labels and probabilities into the original spatial structure.\n    \"\"\"\n\n    inspect(message=f\"Postprocessing the output\")\n    class_labels = list(probabilities_dicts[0].keys())\n\n    # Convert probabilities into a 2D array\n    probabilities = np.array([[prob[class_id] for class_id in class_labels] for prob in probabilities_dicts])\n\n    # Reshape to match the (y, x) spatial structure\n    predicted_labels = predicted_labels.reshape(input_shape[0], input_shape[1])\n    probabilities = probabilities.reshape(len(class_labels), input_shape[0], input_shape[1])\n    probabilities = (probabilities / probabilities.sum(axis=0, keepdims=True)) * 100\n\n\n    return predicted_labels, probabilities\n\ndef create_output_xarray(predicted_labels: np.ndarray, probabilities: np.ndarray, \n                         input_xr: xr.DataArray) -> xr.DataArray:\n    \"\"\"\n    Create an xarray DataArray with predicted labels and probabilities stacked along the bands dimension.\n    \"\"\"\n    inspect(message=f\"Ceating output xarray\")\n    #combined_data = np.concatenate([\n    #    predicted_labels[np.newaxis, :, :],  # Shape (1, y, x) for predicted labels\n    #    probabilities  # Shape (n_classes, y, x) for probabilities\n    #], axis=0)\n\n    return xr.DataArray(\n        probabilities,\n        dims=[\"bands\", \"y\", \"x\"],\n        coords={\n            'y': input_xr.coords['y'],\n            'x': input_xr.coords['x']\n        }\n    )\n\ndef apply_model(input_xr: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Run inference on the given input data using the provided ONNX runtime session.\n    This method is called for each timestep in the chunk received by apply_datacube.\n    \"\"\"\n    # Step 1: Load the ONNX model\n    try:\n        ort_session = load_onnx_model(context.get(\"model_url\"), cache_dir=\"/tmp/cache\")\n    except ValueError as e:\n        raise RuntimeError(f\"Model loading failed: {e}\")\n\n    # Step 2: Preprocess the input\n    input_np, input_shape = preprocess_input(input_xr, ort_session)\n\n    # Step 3: Perform inference\n    predicted_labels, probabilities_dicts = run_inference(input_np, ort_session)\n\n    # Step 4: Postprocess the output\n    predicted_labels, probabilities = postprocess_output(predicted_labels, probabilities_dicts, input_shape)\n\n    # Step 5: Create the output xarray\n    return create_output_xarray(predicted_labels, probabilities, input_xr)\n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Function that is called for each chunk of data that is processed.\n    The function name and arguments are defined by the UDF API.\n    \n    More information can be found here: \n    https://open-eo.github.io/openeo-python-client/udf.html#udf-function-names-and-signatures\n\n    CAVEAT: Some users tend to extract the underlying numpy array and preprocess it for the model using Numpy functions.\n        The order of the dimensions in the numpy array might not be the same for each back-end or when running a udf locally, \n        which can lead to unexpected results. \n\n        It is recommended to use the named dimensions of the xarray DataArray to avoid this issue.\n        The order of the dimensions can be changed using the transpose method.\n        While it is a better practice to do preprocessing using openeo processes, most operations are also available in Xarray. \n    \"\"\"\n    # Define how you want to handle nan values\n    cube = cube.fillna(0)\n    cube = cube.astype('float32')\n\n    # Apply the model for each timestep in the chunk\n    output_data = apply_model(cube, context)\n\n    return output_data"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "applydimension8": {"arguments": {"data": {"from_node": "filterbands4"}, "dimension": "bands", "process": {"process_graph": {"runudf3": {"arguments": {"context": {"model_url": "https://s3.waw3-1.cloudferro.com/swift/v1/ecdc-waw3-1-ekqouvq3otv8hmw0njzuvo0g4dy0ys8r985n7dggjis3erkpn5o/models/Level2_class-D_68predictors_v1.onnx"}, "data": {"from_parameter": "data"}, "runtime": "Python", "udf": "# /// script\n# dependencies = [\n# \"filelock\",\n# \"onnxruntime\",\n# ]\n# ///\n\nimport os\nimport functools\nimport requests\nimport tempfile\nimport onnxruntime as ort\nimport xarray as xr\nimport numpy as np\nimport shutil\nfrom urllib.parse import urlparse\nfrom openeo.udf import inspect\nfrom typing import Dict\nfrom filelock import FileLock\n\n\ndef is_zip_file(url: str) -> bool:\n    \"\"\"Check if the URL points to a ZIP file.\"\"\"\n    return url.lower().endswith('.zip')\n\ndef is_onnx_file(file_path: str) -> bool:\n    \"\"\"Check if the file is an ONNX model based on its extension.\"\"\"\n    return file_path.endswith('.onnx')\n    \ndef download_file_with_lock(url: str, max_file_size_mb: int = 100, cache_dir: str = '/tmp/cache') -> str:\n    \"\"\"Download a file with concurrency protection and store it temporarily.\"\"\"\n    \n    # Extract the file name from the URL (e.g., \"model_1.onnx\")\n    file_name = os.path.basename(urlparse(url).path)\n    \n    # Construct the file path within the cache directory (e.g., '/tmp/cache/model.onnx')\n    file_path = os.path.join(cache_dir, file_name)\n    \n    # Lock file to prevent concurrent downloads\n    lock_path = file_path + '.download.lock'\n    lock = FileLock(lock_path)\n    \n    with lock:\n        # Check if the file already exists in the cache\n        if os.path.exists(file_path):\n            print(f\"File {file_path} already exists in cache.\")\n            return file_path\n        \n        try:\n            # Download the file to a temporary location\n            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".onnx\")\n            temp_file_path = temp_file.name  # Store the temporary file path\n            \n            inspect(message=f\"Downloading file from {url}...\")\n            response = requests.get(url, stream=True)\n            if response.status_code == 200:\n                file_size = 0\n                with temp_file:\n                    for chunk in response.iter_content(chunk_size=1024):\n                        temp_file.write(chunk)\n                        file_size += len(chunk)\n                        if file_size > max_file_size_mb * 1024 * 1024:\n                            raise ValueError(f\"Downloaded file exceeds the size limit of {max_file_size_mb} MB\")\n\n                inspect(message=f\"Downloaded file to {temp_file_path}\")\n                \n                # After download is complete, move the file from temp to the final destination\n                shutil.move(temp_file_path, file_path)  # Move the file to final location\n\n                return file_path  # Return path of the final model file\n\n            else:\n                raise ValueError(f\"Failed to download file, status code: {response.status_code}\")\n\n        except Exception as e:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)  # Clean up temporary file on error\n            raise ValueError(f\"Error downloading file: {e}\")\n\n@functools.lru_cache(maxsize=5)\ndef load_onnx_model(model_url: str, cache_dir: str = '/tmp/cache') -> ort.InferenceSession:\n    \"\"\"\n    Load an ONNX model into an ONNX Runtime session.\n\n    Args:\n        model_url (str): The URL or file path to the ONNX model.\n        cache_dir (str): Directory for caching or processing model files.\n\n    Returns:\n        ort.InferenceSession: The ONNX Runtime session for the loaded model.\n\n    Raises:\n        ValueError: If the model file cannot be processed or loaded.\n    \"\"\"\n    try:\n        # Process the model file to ensure it's a valid ONNX model\n        model_path = download_file_with_lock(model_url, cache_dir=cache_dir)\n\n        # Initialize the ONNX Runtime session\n        inspect(message=f\"Initializing ONNX Runtime session for model at {model_path}...\")\n        ort_session = ort.InferenceSession(model_path, providers=[\"CPUExecutionProvider\"])\n        inspect(message=\"ONNX model successfully loaded into ONNX Runtime session.\")\n        return ort_session\n\n    except Exception as e:\n        raise ValueError(f\"Failed to load the ONNX model from {model_url}. Error: {e}\")\n\ndef preprocess_input(input_xr: xr.DataArray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Preprocess the input DataArray by ensuring the dimensions are in the correct order,\n    reshaping it, and returning the reshaped numpy array and the original shape.\n    \"\"\"\n    inspect(message=f\"Preprocessing the input\")\n    input_xr = input_xr.transpose(\"y\", \"x\", \"bands\")\n    input_shape = input_xr.shape\n    input_np = input_xr.values.reshape(-1, ort_session.get_inputs()[0].shape[1])\n    return input_np, input_shape\n\ndef run_inference(input_np: np.ndarray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Run inference using the ONNX runtime session and return predicted labels and probabilities.\n    \"\"\"\n    inspect(message=f\"Running inference\")\n    ort_inputs = {ort_session.get_inputs()[0].name: input_np}\n    ort_outputs = ort_session.run(None, ort_inputs)\n    predicted_labels = ort_outputs[0]\n    probabilities_dicts = ort_outputs[1]\n    return predicted_labels, probabilities_dicts\n\ndef postprocess_output(predicted_labels: np.ndarray, probabilities_dicts: list, input_shape: tuple) -> tuple:\n    \"\"\"\n    Postprocess the output by reshaping the predicted labels and probabilities into the original spatial structure.\n    \"\"\"\n\n    inspect(message=f\"Postprocessing the output\")\n    class_labels = list(probabilities_dicts[0].keys())\n\n    # Convert probabilities into a 2D array\n    probabilities = np.array([[prob[class_id] for class_id in class_labels] for prob in probabilities_dicts])\n\n    # Reshape to match the (y, x) spatial structure\n    predicted_labels = predicted_labels.reshape(input_shape[0], input_shape[1])\n    probabilities = probabilities.reshape(len(class_labels), input_shape[0], input_shape[1])\n    probabilities = (probabilities / probabilities.sum(axis=0, keepdims=True)) * 100\n\n\n    return predicted_labels, probabilities\n\ndef create_output_xarray(predicted_labels: np.ndarray, probabilities: np.ndarray, \n                         input_xr: xr.DataArray) -> xr.DataArray:\n    \"\"\"\n    Create an xarray DataArray with predicted labels and probabilities stacked along the bands dimension.\n    \"\"\"\n    inspect(message=f\"Ceating output xarray\")\n    #combined_data = np.concatenate([\n    #    predicted_labels[np.newaxis, :, :],  # Shape (1, y, x) for predicted labels\n    #    probabilities  # Shape (n_classes, y, x) for probabilities\n    #], axis=0)\n\n    return xr.DataArray(\n        probabilities,\n        dims=[\"bands\", \"y\", \"x\"],\n        coords={\n            'y': input_xr.coords['y'],\n            'x': input_xr.coords['x']\n        }\n    )\n\ndef apply_model(input_xr: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Run inference on the given input data using the provided ONNX runtime session.\n    This method is called for each timestep in the chunk received by apply_datacube.\n    \"\"\"\n    # Step 1: Load the ONNX model\n    try:\n        ort_session = load_onnx_model(context.get(\"model_url\"), cache_dir=\"/tmp/cache\")\n    except ValueError as e:\n        raise RuntimeError(f\"Model loading failed: {e}\")\n\n    # Step 2: Preprocess the input\n    input_np, input_shape = preprocess_input(input_xr, ort_session)\n\n    # Step 3: Perform inference\n    predicted_labels, probabilities_dicts = run_inference(input_np, ort_session)\n\n    # Step 4: Postprocess the output\n    predicted_labels, probabilities = postprocess_output(predicted_labels, probabilities_dicts, input_shape)\n\n    # Step 5: Create the output xarray\n    return create_output_xarray(predicted_labels, probabilities, input_xr)\n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Function that is called for each chunk of data that is processed.\n    The function name and arguments are defined by the UDF API.\n    \n    More information can be found here: \n    https://open-eo.github.io/openeo-python-client/udf.html#udf-function-names-and-signatures\n\n    CAVEAT: Some users tend to extract the underlying numpy array and preprocess it for the model using Numpy functions.\n        The order of the dimensions in the numpy array might not be the same for each back-end or when running a udf locally, \n        which can lead to unexpected results. \n\n        It is recommended to use the named dimensions of the xarray DataArray to avoid this issue.\n        The order of the dimensions can be changed using the transpose method.\n        While it is a better practice to do preprocessing using openeo processes, most operations are also available in Xarray. \n    \"\"\"\n    # Define how you want to handle nan values\n    cube = cube.fillna(0)\n    cube = cube.astype('float32')\n\n    # Apply the model for each timestep in the chunk\n    output_data = apply_model(cube, context)\n\n    return output_data"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "applydimension9": {"arguments": {"data": {"from_node": "filterbands5"}, "dimension": "bands", "process": {"process_graph": {"runudf4": {"arguments": {"context": {"model_url": "https://s3.waw3-1.cloudferro.com/swift/v1/ecdc-waw3-1-ekqouvq3otv8hmw0njzuvo0g4dy0ys8r985n7dggjis3erkpn5o/models/Level2_class-E_85predictors_v1.onnx"}, "data": {"from_parameter": "data"}, "runtime": "Python", "udf": "# /// script\n# dependencies = [\n# \"filelock\",\n# \"onnxruntime\",\n# ]\n# ///\n\nimport os\nimport functools\nimport requests\nimport tempfile\nimport onnxruntime as ort\nimport xarray as xr\nimport numpy as np\nimport shutil\nfrom urllib.parse import urlparse\nfrom openeo.udf import inspect\nfrom typing import Dict\nfrom filelock import FileLock\n\n\ndef is_zip_file(url: str) -> bool:\n    \"\"\"Check if the URL points to a ZIP file.\"\"\"\n    return url.lower().endswith('.zip')\n\ndef is_onnx_file(file_path: str) -> bool:\n    \"\"\"Check if the file is an ONNX model based on its extension.\"\"\"\n    return file_path.endswith('.onnx')\n    \ndef download_file_with_lock(url: str, max_file_size_mb: int = 100, cache_dir: str = '/tmp/cache') -> str:\n    \"\"\"Download a file with concurrency protection and store it temporarily.\"\"\"\n    \n    # Extract the file name from the URL (e.g., \"model_1.onnx\")\n    file_name = os.path.basename(urlparse(url).path)\n    \n    # Construct the file path within the cache directory (e.g., '/tmp/cache/model.onnx')\n    file_path = os.path.join(cache_dir, file_name)\n    \n    # Lock file to prevent concurrent downloads\n    lock_path = file_path + '.download.lock'\n    lock = FileLock(lock_path)\n    \n    with lock:\n        # Check if the file already exists in the cache\n        if os.path.exists(file_path):\n            print(f\"File {file_path} already exists in cache.\")\n            return file_path\n        \n        try:\n            # Download the file to a temporary location\n            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".onnx\")\n            temp_file_path = temp_file.name  # Store the temporary file path\n            \n            inspect(message=f\"Downloading file from {url}...\")\n            response = requests.get(url, stream=True)\n            if response.status_code == 200:\n                file_size = 0\n                with temp_file:\n                    for chunk in response.iter_content(chunk_size=1024):\n                        temp_file.write(chunk)\n                        file_size += len(chunk)\n                        if file_size > max_file_size_mb * 1024 * 1024:\n                            raise ValueError(f\"Downloaded file exceeds the size limit of {max_file_size_mb} MB\")\n\n                inspect(message=f\"Downloaded file to {temp_file_path}\")\n                \n                # After download is complete, move the file from temp to the final destination\n                shutil.move(temp_file_path, file_path)  # Move the file to final location\n\n                return file_path  # Return path of the final model file\n\n            else:\n                raise ValueError(f\"Failed to download file, status code: {response.status_code}\")\n\n        except Exception as e:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)  # Clean up temporary file on error\n            raise ValueError(f\"Error downloading file: {e}\")\n\n@functools.lru_cache(maxsize=5)\ndef load_onnx_model(model_url: str, cache_dir: str = '/tmp/cache') -> ort.InferenceSession:\n    \"\"\"\n    Load an ONNX model into an ONNX Runtime session.\n\n    Args:\n        model_url (str): The URL or file path to the ONNX model.\n        cache_dir (str): Directory for caching or processing model files.\n\n    Returns:\n        ort.InferenceSession: The ONNX Runtime session for the loaded model.\n\n    Raises:\n        ValueError: If the model file cannot be processed or loaded.\n    \"\"\"\n    try:\n        # Process the model file to ensure it's a valid ONNX model\n        model_path = download_file_with_lock(model_url, cache_dir=cache_dir)\n\n        # Initialize the ONNX Runtime session\n        inspect(message=f\"Initializing ONNX Runtime session for model at {model_path}...\")\n        ort_session = ort.InferenceSession(model_path, providers=[\"CPUExecutionProvider\"])\n        inspect(message=\"ONNX model successfully loaded into ONNX Runtime session.\")\n        return ort_session\n\n    except Exception as e:\n        raise ValueError(f\"Failed to load the ONNX model from {model_url}. Error: {e}\")\n\ndef preprocess_input(input_xr: xr.DataArray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Preprocess the input DataArray by ensuring the dimensions are in the correct order,\n    reshaping it, and returning the reshaped numpy array and the original shape.\n    \"\"\"\n    inspect(message=f\"Preprocessing the input\")\n    input_xr = input_xr.transpose(\"y\", \"x\", \"bands\")\n    input_shape = input_xr.shape\n    input_np = input_xr.values.reshape(-1, ort_session.get_inputs()[0].shape[1])\n    return input_np, input_shape\n\ndef run_inference(input_np: np.ndarray, ort_session: ort.InferenceSession) -> tuple:\n    \"\"\"\n    Run inference using the ONNX runtime session and return predicted labels and probabilities.\n    \"\"\"\n    inspect(message=f\"Running inference\")\n    ort_inputs = {ort_session.get_inputs()[0].name: input_np}\n    ort_outputs = ort_session.run(None, ort_inputs)\n    predicted_labels = ort_outputs[0]\n    probabilities_dicts = ort_outputs[1]\n    return predicted_labels, probabilities_dicts\n\ndef postprocess_output(predicted_labels: np.ndarray, probabilities_dicts: list, input_shape: tuple) -> tuple:\n    \"\"\"\n    Postprocess the output by reshaping the predicted labels and probabilities into the original spatial structure.\n    \"\"\"\n\n    inspect(message=f\"Postprocessing the output\")\n    class_labels = list(probabilities_dicts[0].keys())\n\n    # Convert probabilities into a 2D array\n    probabilities = np.array([[prob[class_id] for class_id in class_labels] for prob in probabilities_dicts])\n\n    # Reshape to match the (y, x) spatial structure\n    predicted_labels = predicted_labels.reshape(input_shape[0], input_shape[1])\n    probabilities = probabilities.reshape(len(class_labels), input_shape[0], input_shape[1])\n    probabilities = (probabilities / probabilities.sum(axis=0, keepdims=True)) * 100\n\n\n    return predicted_labels, probabilities\n\ndef create_output_xarray(predicted_labels: np.ndarray, probabilities: np.ndarray, \n                         input_xr: xr.DataArray) -> xr.DataArray:\n    \"\"\"\n    Create an xarray DataArray with predicted labels and probabilities stacked along the bands dimension.\n    \"\"\"\n    inspect(message=f\"Ceating output xarray\")\n    #combined_data = np.concatenate([\n    #    predicted_labels[np.newaxis, :, :],  # Shape (1, y, x) for predicted labels\n    #    probabilities  # Shape (n_classes, y, x) for probabilities\n    #], axis=0)\n\n    return xr.DataArray(\n        probabilities,\n        dims=[\"bands\", \"y\", \"x\"],\n        coords={\n            'y': input_xr.coords['y'],\n            'x': input_xr.coords['x']\n        }\n    )\n\ndef apply_model(input_xr: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Run inference on the given input data using the provided ONNX runtime session.\n    This method is called for each timestep in the chunk received by apply_datacube.\n    \"\"\"\n    # Step 1: Load the ONNX model\n    try:\n        ort_session = load_onnx_model(context.get(\"model_url\"), cache_dir=\"/tmp/cache\")\n    except ValueError as e:\n        raise RuntimeError(f\"Model loading failed: {e}\")\n\n    # Step 2: Preprocess the input\n    input_np, input_shape = preprocess_input(input_xr, ort_session)\n\n    # Step 3: Perform inference\n    predicted_labels, probabilities_dicts = run_inference(input_np, ort_session)\n\n    # Step 4: Postprocess the output\n    predicted_labels, probabilities = postprocess_output(predicted_labels, probabilities_dicts, input_shape)\n\n    # Step 5: Create the output xarray\n    return create_output_xarray(predicted_labels, probabilities, input_xr)\n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Function that is called for each chunk of data that is processed.\n    The function name and arguments are defined by the UDF API.\n    \n    More information can be found here: \n    https://open-eo.github.io/openeo-python-client/udf.html#udf-function-names-and-signatures\n\n    CAVEAT: Some users tend to extract the underlying numpy array and preprocess it for the model using Numpy functions.\n        The order of the dimensions in the numpy array might not be the same for each back-end or when running a udf locally, \n        which can lead to unexpected results. \n\n        It is recommended to use the named dimensions of the xarray DataArray to avoid this issue.\n        The order of the dimensions can be changed using the transpose method.\n        While it is a better practice to do preprocessing using openeo processes, most operations are also available in Xarray. \n    \"\"\"\n    # Define how you want to handle nan values\n    cube = cube.fillna(0)\n    cube = cube.astype('float32')\n\n    # Apply the model for each timestep in the chunk\n    output_data = apply_model(cube, context)\n\n    return output_data"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "dropdimension1": {"arguments": {"data": {"from_node": "filterbbox2"}, "name": "t"}, "process_id": "drop_dimension"}, "filterbands1": {"arguments": {"bands": ["B02_p2", "B02_p25", "B02_median", "B02_p75", "B02_p98", "B02_mean", "B02_sd", "B02_sum", "B02_iqr", "B03_p2", "B03_p25", "B03_median", "B03_p75", "B03_p98", "B03_mean", "B03_sd", "B03_sum", "B03_iqr", "B04_p2", "B04_p25", "B04_median", "B04_p75", "B04_p98", "B04_mean", "B04_sd", "B04_sum", "B04_iqr", "B05_p2", "B05_p25", "B05_median", "B05_p75", "B05_p98", "B05_mean", "B05_sd", "B05_sum", "B05_iqr", "B06_p2", "B06_p25", "B06_median", "B06_p75", "B06_p98", "B06_mean", "B06_sd", "B06_sum", "B06_iqr", "B07_p2", "B07_p25", "B07_median", "B07_p75", "B07_p98", "B07_mean", "B07_sd", "B07_sum", "B07_iqr", "B08_p2", "B08_p25", "B08_median", "B08_p75", "B08_p98", "B08_mean", "B08_sd", "B08_sum", "B08_iqr", "B8A_p2", "B8A_p25", "B8A_median", "B8A_p75", "B8A_p98", "B8A_mean", "B8A_sd", "B8A_sum", "B8A_iqr", "B11_p2", "B11_p25", "B11_median", "B11_p75", "B11_p98", "B11_mean", "B11_sd", "B11_sum", "B11_iqr", "B12_p2", "B12_p25", "B12_median", "B12_p75", "B12_p98", "B12_mean", "B12_sd", "B12_sum", "B12_iqr", "NDVI_p2", "NDVI_p25", "NDVI_median", "NDVI_p75", "NDVI_p98", "NDVI_mean", "NDVI_sd", "NDVI_sum", "NDVI_iqr", "AVI_p2", "AVI_p25", "AVI_median", "AVI_p75", "AVI_p98", "AVI_mean", "AVI_sd", "AVI_sum", "AVI_iqr", "CIRE_p2", "CIRE_p25", "CIRE_median", "CIRE_p75", "CIRE_p98", "CIRE_mean", "CIRE_sd", "CIRE_sum", "CIRE_iqr", "NIRv_p2", "NIRv_p25", "NIRv_median", "NIRv_p75", "NIRv_p98", "NIRv_mean", "NIRv_sd", "NIRv_sum", "NIRv_iqr", "NDMI_p2", "NDMI_p25", "NDMI_median", "NDMI_p75", "NDMI_p98", "NDMI_mean", "NDMI_sd", "NDMI_sum", "NDMI_iqr", "NDWI_p2", "NDWI_p25", "NDWI_median", "NDWI_p75", "NDWI_p98", "NDWI_mean", "NDWI_sd", "NDWI_sum", "NDWI_iqr", "BLFEI_p2", "BLFEI_p25", "BLFEI_median", "BLFEI_p75", "BLFEI_p98", "BLFEI_mean", "BLFEI_sd", "BLFEI_sum", "BLFEI_iqr", "MNDWI_p2", "MNDWI_p25", "MNDWI_median", "MNDWI_p75", "MNDWI_p98", "MNDWI_mean", "MNDWI_sd", "MNDWI_sum", "MNDWI_iqr", "NDVIMNDWI_p2", "NDVIMNDWI_p25", "NDVIMNDWI_median", "NDVIMNDWI_p75", "NDVIMNDWI_p98", "NDVIMNDWI_mean", "NDVIMNDWI_sd", "NDVIMNDWI_sum", "NDVIMNDWI_iqr", "S2WI_p2", "S2WI_p25", "S2WI_median", "S2WI_p75", "S2WI_p98", "S2WI_mean", "S2WI_sd", "S2WI_sum", "S2WI_iqr", "S2REP_p2", "S2REP_p25", "S2REP_median", "S2REP_p75", "S2REP_p98", "S2REP_mean", "IRECI_p2", "IRECI_p25", "IRECI_median", "IRECI_p75", "IRECI_p98", "IRECI_mean", "IRECI_sd", "IRECI_sum", "IRECI_iqr", "VV_p2", "VV_p25", "VV_median", "VV_p75", "VV_p98", "VV_mean", "VV_sd", "VV_iqr", "VH_p2", "VH_p25", "VH_median", "VH_p75", "VH_p98", "VH_mean", "VH_sd", "VH_iqr", "RVI_p2", "RVI_p25", "RVI_median", "RVI_p75", "RVI_p98", "RVI_mean", "RVI_sd", "RVI_sum", "RVI_iqr", "VHVVD_p2", "VHVVD_p25", "VHVVD_median", "VHVVD_p75", "VHVVD_p98", "VHVVD_mean", "VHVVD_sd", "VHVVD_iqr", "VHVVR_p2", "VHVVR_p25", "VHVVR_median", "VHVVR_p75", "VHVVR_p98", "VHVVR_mean", "VHVVR_sd", "VHVVR_sum", "VHVVR_iqr"], "data": {"from_node": "renamelabels4"}}, "process_id": "filter_bands"}, "filterbands2": {"arguments": {"bands": ["NDVI_p75", "BLFEI_p25", "NDWI_p25", "NDWI_median", "NDVIMNDWI_p75", "NDVI_median", "BLFEI_median", "CIRE_p75", "B12_sum", "bdod", "NDVI_mean", "NDVIMNDWI_median", "CIRE_mean", "CIRE_median", "phh2o", "IRECI_p98", "NDWI_mean", "IRECI_p75", "CIRE_sum", "BLFEI_p2", "NDVIMNDWI_mean", "BLFEI_mean", "IRECI_mean", "B12_p75", "IRECI_sd", "NDWI_p75", "B04_median", "IRECI_median", "NDVI_p25", "cfvo", "NDVI_p98", "NDVIMNDWI_p25", "CIRE_p98", "IRECI_sum", "NIRv_p75", "BLFEI_p75", "NIRv_median", "NIRv_p98", "NIRv_mean", "IRECI_iqr", "DEM", "B04_p25", "NDVIMNDWI_p98", "CIRE_p25", "gdd5", "AVI_p98", "B12_mean", "AVI_p75", "NIRv_sd", "soc", "VH_p25", "VH_iqr", "B12_median", "B02_median", "B04_p75", "B12_iqr", "NDVI_sum", "B11_sum", "AVI_mean", "B03_median", "CIRE_iqr", "B04_mean", "AVI_median", "B02_p75", "NIRv_iqr", "NIRv_sum", "B02_p25", "NDWI_p2", "BLFEI_sum", "B05_p75", "VH_mean", "B03_p75", "CIRE_sd", "B04_sum", "NDWI_sum", "NDMI_sd", "NDMI_median", "B05_median", "VH_median", "B05_sum", "pop", "NDVIMNDWI_sum", "NDVI_sd", "AVI_p25", "NIRv_p25", "B8A_p75", "S2WI_sum", "bio12", "NDVI_iqr", "VV_p25", "MNDWI_median", "B12_p25", "VH_p75", "MNDWI_p25", "scd", "NDMI_sum", "B8A_median", "B07_p75", "AVI_sd", "IRECI_p25", "NDMI_p75", "B07_iqr", "gst", "B8A_iqr", "VV_mean", "B05_mean", "B8A_mean", "CIRE_p2", "B05_p25", "B02_mean", "S2WI_iqr", "B11_p75", "B08_p75", "NDWI_p98", "VV_median", "clay", "B12_p98", "NDMI_mean", "NDVI_p2", "B8A_p25", "B11_mean", "B03_mean", "AVI_iqr", "MNDWI_p75", "VH_p2", "MNDWI_sum", "B06_p75", "NDMI_p98", "B03_p25"], "data": {"from_node": "mergecubes3"}}, "process_id": "filter_bands"}, "filterbands3": {"arguments": {"bands": ["B12_p25", "B12_median", "B05_sum", "B11_p25", "B11_median", "B12_p75", "B05_p75", "B04_p25", "B05_median", "B12_mean", "B12_sum", "NDMI_median", "B12_p2", "B04_p2", "B04_median", "gst", "NDMI_mean", "B02_p25", "B02_p2", "NIRv_iqr", "B07_iqr", "NDMI_sum", "DEM", "S2WI_p25", "B04_sum", "B03_p25", "B07_p75", "IRECI_iqr", "scd", "B11_p75", "B11_sum", "B05_mean", "NDMI_p25", "bio12", "B04_p75", "S2WI_p98", "B08_median", "B03_median", "B06_p75", "NIRv_sd", "gsp", "B05_p25", "B06_iqr", "B03_p2", "B04_mean", "IRECI_sd", "B08_p75", "S2WI_median", "B08_iqr", "MNDWI_p75", "gdd5", "B04_iqr", "VH_p75", "BLFEI_p75", "B12_iqr", "S2WI_mean", "B11_mean", "NDWI_p75", "NDMI_p75", "B8A_median", "B05_p98", "B06_median", "VV_mean", "B02_median", "NDMI_p98", "B07_median", "NDVI_p25", "CIRE_p25", "B08_p25", "B07_mean", "B08_mean"], "data": {"from_node": "mergecubes3"}}, "process_id": "filter_bands"}, "filterbands4": {"arguments": {"bands": ["gdd5", "DEM", "scd", "gst", "bio12", "cfvo", "soc", "gsp", "sand", "VV_p2", "NDVI_sum", "NDWI_sum", "BLFEI_sum", "NDVIMNDWI_sum", "VH_p2", "MNDWI_sum", "AVI_sum", "VH_sd", "CIRE_p25", "NDWI_p75", "NIRv_sum", "NDWI_p98", "NDVIMNDWI_p2", "CIRE_sum", "VV_sd", "B02_p98", "NDVI_p25", "BLFEI_p98", "B8A_sum", "B03_p98", "NDVI_mean", "NDVI_median", "pop", "IRECI_sum", "B07_sum", "NDWI_mean", "B06_sum", "phh2o", "NIRv_median", "clay", "NIRv_mean", "bdod", "NDVI_p2", "NIRv_p25", "cec", "MNDWI_p98", "BLFEI_sd", "B08_sum", "dist", "CIRE_median", "IRECI_p25", "AVI_mean", "NIRv_p2", "CIRE_mean", "IRECI_median", "NDWI_median", "NDVIMNDWI_p25", "S2WI_mean", "NDMI_sd", "NDVIMNDWI_mean", "B11_sum", "NDVIMNDWI_iqr", "IRECI_p2", "NDVI_sd", "AVI_p25", "NDWI_iqr", "NDVIMNDWI_median", "S2WI_median"], "data": {"from_node": "mergecubes3"}}, "process_id": "filter_bands"}, "filterbands5": {"arguments": {"bands": ["scd", "bio12", "cfvo", "soc", "DEM", "gdd5", "bdod", "gsp", "sand", "dist", "B08_p25", "gst", "B8A_p25", "B08_median", "B06_p25", "B07_p25", "AVI_p25", "B08_mean", "AVI_mean", "AVI_median", "VV_p2", "RVI_p2", "B07_median", "VHVVR_p2", "VH_p2", "B8A_mean", "B06_mean", "clay", "B06_median", "NIRv_p25", "B07_mean", "NIRv_median", "phh2o", "B11_sum", "B08_sum", "AVI_sum", "MNDWI_sum", "B12_sum", "BLFEI_sum", "B05_sum", "RVI_p25", "VHVVR_p25", "NDWI_p75", "VV_mean", "NDVI_p25", "RVI_median", "VHVVR_median", "cec", "NDVI_sum", "NDVIMNDWI_sum", "B11_p75", "NDWI_sum", "BLFEI_median", "RVI_mean", "RVI_sum", "VH_mean", "VHVVR_sum", "VHVVR_p75", "RVI_p75", "B03_p25", "B04_p25", "NDWI_median", "B03_median", "VV_p25", "VV_p75", "VV_median", "B11_mean", "NDMI_p2", "B02_p25", "B02_median", "B12_median", "B11_median", "S2WI_p98", "B11_p25", "VH_median", "IRECI_p25", "VH_p75", "VH_p25", "S2WI_sd", "VHVVD_p75", "B11_iqr", "VHVVD_p25", "VHVVD_mean", "VHVVD_median", "pop"], "data": {"from_node": "mergecubes3"}}, "process_id": "filter_bands"}, "filterbands6": {"arguments": {"bands": ["gdd5", "DEM", "scd", "soc", "gst", "bio12", "cfvo", "bdod", "B11_sum", "MNDWI_sum", "phh2o", "B12_sum", "BLFEI_sum", "B8A_sum", "AVI_sum", "B07_sum", "gsp", "B08_sum", "B06_sum", "NDVIMNDWI_sum", "S2WI_mean", "clay", "sand", "NDMI_p2", "S2WI_p25", "NDWI_sum", "S2WI_sum", "S2WI_p75", "S2WI_median", "B05_sum", "NDMI_p25", "NDMI_mean", "NIRv_sum", "B11_mean", "B12_p75", "NDVI_sum", "B04_sum", "B12_mean", "cec", "NDWI_p75", "B11_median", "B12_median", "NDMI_median", "B03_sum", "S2WI_p2", "B12_p25", "B11_p25", "NDMI_p98", "IRECI_iqr", "B11_p75", "IRECI_sum", "NDVI_mean", "NDVI_p25", "B02_sum", "dist", "NDMI_iqr", "B12_p2", "B02_p75", "B02_median", "B04_iqr", "S2WI_p98", "B11_p2", "NDWI_mean", "B05_p75", "CIRE_iqr", "NDWI_iqr", "B03_p75", "pop", "MNDWI_mean", "IRECI_p25", "B04_median", "B04_p2", "BLFEI_iqr", "B04_p25", "B05_mean", "B03_median", "B05_p25", "B05_median", "MNDWI_p75", "NDWI_median", "CIRE_sum", "IRECI_sd", "MNDWI_p2", "B05_p2", "BLFEI_mean", "B02_p25", "CIRE_median", "B03_p25", "B8A_p98", "IRECI_p75"], "data": {"from_node": "mergecubes3"}}, "process_id": "filter_bands"}, "filterbbox1": {"arguments": {"data": {"from_node": "resamplespatial3"}, "extent": {"crs": "EPSG:3035", "east": 4841500, "north": 2818500, "south": 2808500, "west": 4831500}}, "process_id": "filter_bbox"}, "filterbbox2": {"arguments": {"data": {"from_node": "resamplespatial4"}, "extent": {"crs": "EPSG:3035", "east": 4841500, "north": 2818500, "south": 2808500, "west": 4831500}}, "process_id": "filter_bbox"}, "loadcollection1": {"arguments": {"bands": ["B02", "B03", "B04", "B05", "B06", "B07", "B08", "B8A", "B11", "B12"], "id": "SENTINEL2_L2A", "properties": {"eo:cloud_cover": {"process_graph": {"lte1": {"arguments": {"x": {"from_parameter": "value"}, "y": 95}, "process_id": "lte", "result": true}}}}, "spatial_extent": {"crs": "EPSG:3035", "east": 4841500, "north": 2818500, "south": 2808500, "west": 4831500}, "temporal_extent": ["2021-01-01", "2021-02-01"]}, "process_id": "load_collection"}, "loadcollection2": {"arguments": {"bands": ["SCL"], "id": "SENTINEL2_L2A", "properties": {"eo:cloud_cover": {"process_graph": {"lte2": {"arguments": {"x": {"from_parameter": "value"}, "y": 95}, "process_id": "lte", "result": true}}}}, "spatial_extent": {"crs": "EPSG:3035", "east": 4841500, "north": 2818500, "south": 2808500, "west": 4831500}, "temporal_extent": ["2021-01-01", "2021-02-01"]}, "process_id": "load_collection"}, "loadcollection3": {"arguments": {"bands": ["VH", "VV"], "id": "SENTINEL1_GRD", "properties": {"sat:orbit_state": {"process_graph": {"eq1": {"arguments": {"x": {"from_parameter": "value"}, "y": "DESCENDING"}, "process_id": "eq", "result": true}}}}, "spatial_extent": {"crs": "EPSG:3035", "east": 4841500, "north": 2818500, "south": 2808500, "west": 4831500}, "temporal_extent": ["2021-01-01", "2021-02-01"]}, "process_id": "load_collection"}, "loadcollection4": {"arguments": {"bands": ["DEM"], "id": "COPERNICUS_30", "spatial_extent": null, "temporal_extent": null}, "process_id": "load_collection"}, "loadstac1": {"arguments": {"url": "https://stac.openeo.vito.be/collections/wenr_features"}, "process_id": "load_stac"}, "mask1": {"arguments": {"data": {"from_node": "resamplespatial1"}, "mask": {"from_node": "renamelabels1"}}, "process_id": "mask"}, "mergecubes1": {"arguments": {"cube1": {"from_node": "renamelabels2"}, "cube2": {"from_node": "renamelabels3"}}, "process_id": "merge_cubes"}, "mergecubes2": {"arguments": {"cube1": {"from_node": "filterbands1"}, "cube2": {"from_node": "filterbbox1"}}, "process_id": "merge_cubes"}, "mergecubes3": {"arguments": {"cube1": {"from_node": "mergecubes2"}, "cube2": {"from_node": "dropdimension1"}}, "process_id": "merge_cubes"}, "reducedimension1": {"arguments": {"data": {"from_node": "loadcollection4"}, "dimension": "t", "reducer": {"process_graph": {"last1": {"arguments": {"data": {"from_parameter": "data"}, "ignore_nodata": true}, "process_id": "last", "result": true}}}}, "process_id": "reduce_dimension"}, "renamelabels1": {"arguments": {"data": {"from_node": "toscldilationmask1"}, "dimension": "bands", "target": ["S2-L2A-SCL_DILATED_MASK"]}, "process_id": "rename_labels"}, "renamelabels2": {"arguments": {"data": {"from_node": "applydimension1"}, "dimension": "bands", "target": ["B02", "B03", "B04", "B05", "B06", "B07", "B08", "B8A", "B11", "B12", "NDVI", "AVI", "CIRE", "NIRv", "NDMI", "NDWI", "BLFEI", "MNDWI", "NDVIMNDWI", "S2WI", "S2REP", "IRECI"]}, "process_id": "rename_labels"}, "renamelabels3": {"arguments": {"data": {"from_node": "applydimension4"}, "dimension": "bands", "target": ["VV", "VH", "RVI", "VHVVD", "VHVVR"]}, "process_id": "rename_labels"}, "renamelabels4": {"arguments": {"data": {"from_node": "applydimension5"}, "dimension": "bands", "target": ["B02_p2", "B02_p25", "B02_median", "B02_p75", "B02_p98", "B02_mean", "B02_sd", "B02_sum", "B02_iqr", "B03_p2", "B03_p25", "B03_median", "B03_p75", "B03_p98", "B03_mean", "B03_sd", "B03_sum", "B03_iqr", "B04_p2", "B04_p25", "B04_median", "B04_p75", "B04_p98", "B04_mean", "B04_sd", "B04_sum", "B04_iqr", "B05_p2", "B05_p25", "B05_median", "B05_p75", "B05_p98", "B05_mean", "B05_sd", "B05_sum", "B05_iqr", "B06_p2", "B06_p25", "B06_median", "B06_p75", "B06_p98", "B06_mean", "B06_sd", "B06_sum", "B06_iqr", "B07_p2", "B07_p25", "B07_median", "B07_p75", "B07_p98", "B07_mean", "B07_sd", "B07_sum", "B07_iqr", "B08_p2", "B08_p25", "B08_median", "B08_p75", "B08_p98", "B08_mean", "B08_sd", "B08_sum", "B08_iqr", "B8A_p2", "B8A_p25", "B8A_median", "B8A_p75", "B8A_p98", "B8A_mean", "B8A_sd", "B8A_sum", "B8A_iqr", "B11_p2", "B11_p25", "B11_median", "B11_p75", "B11_p98", "B11_mean", "B11_sd", "B11_sum", "B11_iqr", "B12_p2", "B12_p25", "B12_median", "B12_p75", "B12_p98", "B12_mean", "B12_sd", "B12_sum", "B12_iqr", "NDVI_p2", "NDVI_p25", "NDVI_median", "NDVI_p75", "NDVI_p98", "NDVI_mean", "NDVI_sd", "NDVI_sum", "NDVI_iqr", "AVI_p2", "AVI_p25", "AVI_median", "AVI_p75", "AVI_p98", "AVI_mean", "AVI_sd", "AVI_sum", "AVI_iqr", "CIRE_p2", "CIRE_p25", "CIRE_median", "CIRE_p75", "CIRE_p98", "CIRE_mean", "CIRE_sd", "CIRE_sum", "CIRE_iqr", "NIRv_p2", "NIRv_p25", "NIRv_median", "NIRv_p75", "NIRv_p98", "NIRv_mean", "NIRv_sd", "NIRv_sum", "NIRv_iqr", "NDMI_p2", "NDMI_p25", "NDMI_median", "NDMI_p75", "NDMI_p98", "NDMI_mean", "NDMI_sd", "NDMI_sum", "NDMI_iqr", "NDWI_p2", "NDWI_p25", "NDWI_median", "NDWI_p75", "NDWI_p98", "NDWI_mean", "NDWI_sd", "NDWI_sum", "NDWI_iqr", "BLFEI_p2", "BLFEI_p25", "BLFEI_median", "BLFEI_p75", "BLFEI_p98", "BLFEI_mean", "BLFEI_sd", "BLFEI_sum", "BLFEI_iqr", "MNDWI_p2", "MNDWI_p25", "MNDWI_median", "MNDWI_p75", "MNDWI_p98", "MNDWI_mean", "MNDWI_sd", "MNDWI_sum", "MNDWI_iqr", "NDVIMNDWI_p2", "NDVIMNDWI_p25", "NDVIMNDWI_median", "NDVIMNDWI_p75", "NDVIMNDWI_p98", "NDVIMNDWI_mean", "NDVIMNDWI_sd", "NDVIMNDWI_sum", "NDVIMNDWI_iqr", "S2WI_p2", "S2WI_p25", "S2WI_median", "S2WI_p75", "S2WI_p98", "S2WI_mean", "S2WI_sd", "S2WI_sum", "S2WI_iqr", "S2REP_p2", "S2REP_p25", "S2REP_median", "S2REP_p75", "S2REP_p98", "S2REP_mean", "S2REP_sd", "S2REP_sum", "S2REP_iqr", "IRECI_p2", "IRECI_p25", "IRECI_median", "IRECI_p75", "IRECI_p98", "IRECI_mean", "IRECI_sd", "IRECI_sum", "IRECI_iqr", "VV_p2", "VV_p25", "VV_median", "VV_p75", "VV_p98", "VV_mean", "VV_sd", "VV_sum", "VV_iqr", "VH_p2", "VH_p25", "VH_median", "VH_p75", "VH_p98", "VH_mean", "VH_sd", "VH_sum", "VH_iqr", "RVI_p2", "RVI_p25", "RVI_median", "RVI_p75", "RVI_p98", "RVI_mean", "RVI_sd", "RVI_sum", "RVI_iqr", "VHVVD_p2", "VHVVD_p25", "VHVVD_median", "VHVVD_p75", "VHVVD_p98", "VHVVD_mean", "VHVVD_sd", "VHVVD_sum", "VHVVD_iqr", "VHVVR_p2", "VHVVR_p25", "VHVVR_median", "VHVVR_p75", "VHVVR_p98", "VHVVR_mean", "VHVVR_sd", "VHVVR_sum", "VHVVR_iqr"]}, "process_id": "rename_labels"}, "renamelabels5": {"arguments": {"data": {"from_node": "applydimension6"}, "dimension": "bands", "target": ["Level1_class-0_129predictors_v1_30000", "Level1_class-0_129predictors_v1_40000", "Level1_class-0_129predictors_v1_50000", "Level1_class-0_129predictors_v1_60000", "Level1_class-0_129predictors_v1_70000", "Level1_class-0_129predictors_v1_80000", "Level1_class-0_129predictors_v1_90000", "Level1_class-0_129predictors_v1_100000", "Level1_class-0_129predictors_v1_110000"]}, "process_id": "rename_labels"}, "renamelabels6": {"arguments": {"data": {"from_node": "applydimension7"}, "dimension": "bands", "target": ["Level2_class-C_71predictors_v1_30100", "Level2_class-C_71predictors_v1_30200", "Level2_class-C_71predictors_v1_30300"]}, "process_id": "rename_labels"}, "renamelabels7": {"arguments": {"data": {"from_node": "applydimension8"}, "dimension": "bands", "target": ["Level2_class-D_68predictors_v1_40100", "Level2_class-D_68predictors_v1_40200", "Level2_class-D_68predictors_v1_40400", "Level2_class-D_68predictors_v1_40500"]}, "process_id": "rename_labels"}, "renamelabels8": {"arguments": {"data": {"from_node": "applydimension9"}, "dimension": "bands", "target": ["Level2_class-E_85predictors_v1_50100", "Level2_class-E_85predictors_v1_50200", "Level2_class-E_85predictors_v1_50300", "Level2_class-E_85predictors_v1_50400", "Level2_class-E_85predictors_v1_50500", "Level2_class-E_85predictors_v1_50600"]}, "process_id": "rename_labels"}, "renamelabels9": {"arguments": {"data": {"from_node": "applydimension10"}, "dimension": "bands", "target": ["Level2_class-F_90predictors_v1_60200", "Level2_class-F_90predictors_v1_60300", "Level2_class-F_90predictors_v1_60400", "Level2_class-F_90predictors_v1_60900", "Level2_class-F_90predictors_v1_61100"]}, "process_id": "rename_labels"}, "resamplespatial1": {"arguments": {"align": "upper-left", "data": {"from_node": "loadcollection1"}, "method": "near", "projection": 3035, "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial2": {"arguments": {"align": "upper-left", "data": {"from_node": "sarbackscatter1"}, "method": "near", "projection": 3035, "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial3": {"arguments": {"align": "upper-left", "data": {"from_node": "reducedimension1"}, "method": "bilinear", "projection": 3035, "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial4": {"arguments": {"align": "upper-left", "data": {"from_node": "loadstac1"}, "method": "near", "projection": 3035, "resolution": 10}, "process_id": "resample_spatial"}, "sarbackscatter1": {"arguments": {"coefficient": "sigma0-ellipsoid", "contributing_area": false, "data": {"from_node": "loadcollection3"}, "elevation_model": "COPERNICUS_30", "ellipsoid_incidence_angle": false, "local_incidence_angle": false, "mask": false, "noise_removal": true, "options": {"debug": false, "elev_geoid": "/opt/openeo-vito-aux-data/egm96.tif", "implementation_version": "2", "otb_memory": 1024, "tile_size": 256}}, "process_id": "sar_backscatter"}, "saveresult1": {"arguments": {"data": {"from_node": "apply4"}, "format": "GTiff", "options": {"separate_asset_per_band": true}}, "process_id": "save_result"}, "saveresult2": {"arguments": {"data": {"from_node": "apply5"}, "format": "GTiff", "options": {"separate_asset_per_band": true}}, "process_id": "save_result"}, "saveresult3": {"arguments": {"data": {"from_node": "apply6"}, "format": "GTiff", "options": {"separate_asset_per_band": true}}, "process_id": "save_result"}, "saveresult4": {"arguments": {"data": {"from_node": "apply7"}, "format": "GTiff", "options": {"separate_asset_per_band": true}}, "process_id": "save_result"}, "saveresult5": {"arguments": {"data": {"from_node": "apply8"}, "format": "GTiff", "options": {"separate_asset_per_band": true}}, "process_id": "save_result", "result": true}, "toscldilationmask1": {"arguments": {"data": {"from_node": "loadcollection2"}, "erosion_kernel_size": 3, "kernel1_size": 17, "kernel2_size": 77, "mask1_values": [2, 4, 5, 6, 7], "mask2_values": [3, 8, 9, 10, 11], "scl_band_name": "SCL"}, "process_id": "to_scl_dilation_mask"}}, "format": "openeo"}, "processing:facility": "openEO Geotrellis backend", "processing:software": {"Geotrellis backend": "0.52.0a1"}, "roles": ["processor"]}], "stac_extensions": ["https://stac-extensions.github.io/eo/v1.1.0/schema.json", "https://stac-extensions.github.io/file/v2.1.0/schema.json", "https://stac-extensions.github.io/processing/v1.1.0/schema.json", "https://stac-extensions.github.io/projection/v1.1.0/schema.json"], "stac_version": "1.0.0", "summaries": {}, "type": "Collection"}